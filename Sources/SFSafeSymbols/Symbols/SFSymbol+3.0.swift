// Don't touch this manually, this code is generated by the SymbolsGenerator helper tool

// 3.0 Symbols
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public extension SFSymbol {
    /// 􁂷
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Arabic, Hindi
    static let _123Rectangle = SFSymbol(rawValue: "123.rectangle")

    /// 􁂸
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Arabic, Hindi
    static let _123RectangleFill = SFSymbol(rawValue: "123.rectangle.fill")

    /// 􀷯
    static let airplaneArrival = SFSymbol(rawValue: "airplane.arrival")

    /// 􀷰
    static let airplaneDeparture = SFSymbol(rawValue: "airplane.departure")

    /// 􀱫
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPlay.
    static let airplayaudioBadgeExclamationmark = SFSymbol(rawValue: "airplayaudio.badge.exclamationmark")

    /// 􀾧
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPlay.
    static let airplayaudioCircle = SFSymbol(rawValue: "airplayaudio.circle")

    /// 􀾨
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPlay.
    static let airplayaudioCircleFill = SFSymbol(rawValue: "airplayaudio.circle.fill")

    /// 􀱪
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPlay.
    static let airplayvideoBadgeExclamationmark = SFSymbol(rawValue: "airplayvideo.badge.exclamationmark")

    /// 􀾑
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPlay.
    static let airplayvideoCircle = SFSymbol(rawValue: "airplayvideo.circle")

    /// 􀾒
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPlay.
    static let airplayvideoCircleFill = SFSymbol(rawValue: "airplayvideo.circle.fill")

    /// 􀹧
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPods.
    static let airpodsChargingcase = SFSymbol(rawValue: "airpods.chargingcase")

    /// 􀹨
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPods.
    static let airpodsChargingcaseFill = SFSymbol(rawValue: "airpods.chargingcase.fill")

    /// 􀹩
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPods.
    static let airpodsChargingcaseWireless = SFSymbol(rawValue: "airpods.chargingcase.wireless")

    /// 􀹪
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPods.
    static let airpodsChargingcaseWirelessFill = SFSymbol(rawValue: "airpods.chargingcase.wireless.fill")

    /// 􀹫
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPods Pro.
    static let airpodsproChargingcaseWireless = SFSymbol(rawValue: "airpodspro.chargingcase.wireless")

    /// 􀹬
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirPods Pro.
    static let airpodsproChargingcaseWirelessFill = SFSymbol(rawValue: "airpodspro.chargingcase.wireless.fill")

    /// 􁄾
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirTag.
    static let airtag = SFSymbol(rawValue: "airtag")

    /// 􁄿
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirTag.
    static let airtagFill = SFSymbol(rawValue: "airtag.fill")

    /// 􁄼
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Right-To-Left
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirTag.
    static let airtagRadiowavesForward = SFSymbol(rawValue: "airtag.radiowaves.forward")

    /// 􁄽
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Right-To-Left
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s AirTag.
    static let airtagRadiowavesForwardFill = SFSymbol(rawValue: "airtag.radiowaves.forward.fill")

    /// 􀩉
    static let alignHorizontalCenter = SFSymbol(rawValue: "align.horizontal.center")

    /// 􀥗
    static let alignHorizontalCenterFill = SFSymbol(rawValue: "align.horizontal.center.fill")

    /// 􀩈
    static let alignHorizontalLeft = SFSymbol(rawValue: "align.horizontal.left")

    /// 􀥖
    static let alignHorizontalLeftFill = SFSymbol(rawValue: "align.horizontal.left.fill")

    /// 􀩊
    static let alignHorizontalRight = SFSymbol(rawValue: "align.horizontal.right")

    /// 􀥘
    static let alignHorizontalRightFill = SFSymbol(rawValue: "align.horizontal.right.fill")

    /// 􀩍
    static let alignVerticalBottom = SFSymbol(rawValue: "align.vertical.bottom")

    /// 􀥛
    static let alignVerticalBottomFill = SFSymbol(rawValue: "align.vertical.bottom.fill")

    /// 􀩌
    static let alignVerticalCenter = SFSymbol(rawValue: "align.vertical.center")

    /// 􀥚
    static let alignVerticalCenterFill = SFSymbol(rawValue: "align.vertical.center.fill")

    /// 􀩋
    static let alignVerticalTop = SFSymbol(rawValue: "align.vertical.top")

    /// 􀥙
    static let alignVerticalTopFill = SFSymbol(rawValue: "align.vertical.top.fill")

    /// 􀬭
    static let allergens = SFSymbol(rawValue: "allergens")

    /// 􁆭
    static let alternatingcurrent = SFSymbol(rawValue: "alternatingcurrent")

    /// 􀷈
    static let antennaRadiowavesLeftAndRightCircle = SFSymbol(rawValue: "antenna.radiowaves.left.and.right.circle")

    /// 􀷉
    static let antennaRadiowavesLeftAndRightCircleFill = SFSymbol(rawValue: "antenna.radiowaves.left.and.right.circle.fill")

    /// 􁅒
    static let antennaRadiowavesLeftAndRightSlash = SFSymbol(rawValue: "antenna.radiowaves.left.and.right.slash")

    /// 􁂠
    static let appBadgeCheckmark = SFSymbol(rawValue: "app.badge.checkmark")

    /// 􁂡
    static let appBadgeCheckmarkFill = SFSymbol(rawValue: "app.badge.checkmark.fill")

    /// 􁀘
    static let appConnectedToAppBelowFill = SFSymbol(rawValue: "app.connected.to.app.below.fill")

    /// 􀿫
    static let appDashed = SFSymbol(rawValue: "app.dashed")

    /// 􀺮
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple Pencil.
    static let applepencil = SFSymbol(rawValue: "applepencil")

    /// 􀼩
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let appletvremoteGen1 = SFSymbol(rawValue: "appletvremote.gen1")

    /// 􀼪
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let appletvremoteGen1Fill = SFSymbol(rawValue: "appletvremote.gen1.fill")

    /// 􀼫
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let appletvremoteGen2 = SFSymbol(rawValue: "appletvremote.gen2")

    /// 􀼬
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let appletvremoteGen2Fill = SFSymbol(rawValue: "appletvremote.gen2.fill")

    /// 􀝩
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let appletvremoteGen3 = SFSymbol(rawValue: "appletvremote.gen3")

    /// 􀝪
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let appletvremoteGen3Fill = SFSymbol(rawValue: "appletvremote.gen3.fill")

    /// 􀼧
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let appletvremoteGen4 = SFSymbol(rawValue: "appletvremote.gen4")

    /// 􀼨
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let appletvremoteGen4Fill = SFSymbol(rawValue: "appletvremote.gen4.fill")

    /// 􀴪
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let applewatchCaseInsetFilled = SFSymbol(rawValue: "applewatch.case.inset.filled")

    /// 􁀒
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s ARKit.
    static let arkitBadgeXmark = SFSymbol(rawValue: "arkit.badge.xmark")

    /// 􁂊
    static let arrowBackwardToLine = SFSymbol(rawValue: "arrow.backward.to.line")

    /// 􁂌
    static let arrowBackwardToLineCircle = SFSymbol(rawValue: "arrow.backward.to.line.circle")

    /// 􁂍
    static let arrowBackwardToLineCircleFill = SFSymbol(rawValue: "arrow.backward.to.line.circle.fill")

    /// 􀓈
    static let arrowDownToLineCircle = SFSymbol(rawValue: "arrow.down.to.line.circle")

    /// 􀓉
    static let arrowDownToLineCircleFill = SFSymbol(rawValue: "arrow.down.to.line.circle.fill")

    /// 􀅄
    static let arrowDownToLineCompact = SFSymbol(rawValue: "arrow.down.to.line.compact")

    /// 􁂎
    static let arrowForwardToLine = SFSymbol(rawValue: "arrow.forward.to.line")

    /// 􁂐
    static let arrowForwardToLineCircle = SFSymbol(rawValue: "arrow.forward.to.line.circle")

    /// 􁂑
    static let arrowForwardToLineCircleFill = SFSymbol(rawValue: "arrow.forward.to.line.circle.fill")

    /// 􀓊
    static let arrowLeftToLineCircle = SFSymbol(rawValue: "arrow.left.to.line.circle")

    /// 􀓋
    static let arrowLeftToLineCircleFill = SFSymbol(rawValue: "arrow.left.to.line.circle.fill")

    /// 􀅅
    static let arrowLeftToLineCompact = SFSymbol(rawValue: "arrow.left.to.line.compact")

    /// 􀓌
    static let arrowRightToLineCircle = SFSymbol(rawValue: "arrow.right.to.line.circle")

    /// 􀓍
    static let arrowRightToLineCircleFill = SFSymbol(rawValue: "arrow.right.to.line.circle.fill")

    /// 􀅆
    static let arrowRightToLineCompact = SFSymbol(rawValue: "arrow.right.to.line.compact")

    /// 􀟩
    static let arrowUpAndDownRighttriangleUpRighttriangleDownFill = SFSymbol(rawValue: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill")

    /// 􀓆
    static let arrowUpToLineCircle = SFSymbol(rawValue: "arrow.up.to.line.circle")

    /// 􀓇
    static let arrowUpToLineCircleFill = SFSymbol(rawValue: "arrow.up.to.line.circle.fill")

    /// 􀅃
    static let arrowUpToLineCompact = SFSymbol(rawValue: "arrow.up.to.line.compact")

    /// 􀟦
    static let arrowtriangleLeftAndLineVerticalAndArrowtriangleRightFill = SFSymbol(rawValue: "arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill")

    /// 􀟧
    static let arrowtriangleRightAndLineVerticalAndArrowtriangleLeftFill = SFSymbol(rawValue: "arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill")

    /// 􀸓
    static let asterisk = SFSymbol(rawValue: "asterisk")

    /// 􀺃
    static let backwardCircle = SFSymbol(rawValue: "backward.circle")

    /// 􀺄
    static let backwardCircleFill = SFSymbol(rawValue: "backward.circle.fill")

    /// 􀺶
    static let battery50 = SFSymbol(rawValue: "battery.50")

    /// 􀺸
    static let battery75 = SFSymbol(rawValue: "battery.75")

    /// 􀺒
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats earphones.
    static let beatsEarphones = SFSymbol(rawValue: "beats.earphones")

    /// 􀺭
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats headphones.
    static let beatsHeadphones = SFSymbol(rawValue: "beats.headphones")

    /// 􀻔
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Powerbeats.
    static let beatsPowerbeats = SFSymbol(rawValue: "beats.powerbeats")

    /// 􀺯
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Powerbeats3.
    static let beatsPowerbeats3 = SFSymbol(rawValue: "beats.powerbeats3")

    /// 􀹭
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Powerbeats Pro.
    static let beatsPowerbeatspro = SFSymbol(rawValue: "beats.powerbeatspro")

    /// 􀹰
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Powerbeats Pro case.
    static let beatsPowerbeatsproChargingcase = SFSymbol(rawValue: "beats.powerbeatspro.chargingcase")

    /// 􀹱
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Powerbeats Pro case.
    static let beatsPowerbeatsproChargingcaseFill = SFSymbol(rawValue: "beats.powerbeatspro.chargingcase.fill")

    /// 􀹯
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Powerbeats Pro.
    static let beatsPowerbeatsproLeft = SFSymbol(rawValue: "beats.powerbeatspro.left")

    /// 􀹮
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Powerbeats Pro.
    static let beatsPowerbeatsproRight = SFSymbol(rawValue: "beats.powerbeatspro.right")

    /// 􀾣
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds.
    static let beatsStudiobudLeft = SFSymbol(rawValue: "beats.studiobud.left")

    /// 􀾤
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds.
    static let beatsStudiobudRight = SFSymbol(rawValue: "beats.studiobud.right")

    /// 􀾢
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds.
    static let beatsStudiobuds = SFSymbol(rawValue: "beats.studiobuds")

    /// 􀾥
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds case.
    static let beatsStudiobudsChargingcase = SFSymbol(rawValue: "beats.studiobuds.chargingcase")

    /// 􀾦
    /// ⚠️ This symbol may not be modified and may only be used to refer to Beats Studio Buds case.
    static let beatsStudiobudsChargingcaseFill = SFSymbol(rawValue: "beats.studiobuds.chargingcase.fill")

    /// 􁁏
    static let bedDoubleCircle = SFSymbol(rawValue: "bed.double.circle")

    /// 􁁐
    static let bedDoubleCircleFill = SFSymbol(rawValue: "bed.double.circle.fill")

    /// 􀻿
    static let bellAndWaveform = SFSymbol(rawValue: "bell.and.waveform")

    /// 􀼀
    static let bellAndWaveformFill = SFSymbol(rawValue: "bell.and.waveform.fill")

    /// 􀰷
    static let bellBadgeCircle = SFSymbol(rawValue: "bell.badge.circle")

    /// 􀰸
    static let bellBadgeCircleFill = SFSymbol(rawValue: "bell.badge.circle.fill")

    /// 􀼷
    static let bellSquare = SFSymbol(rawValue: "bell.square")

    /// 􀼸
    static let bellSquareFill = SFSymbol(rawValue: "bell.square.fill")

    /// 􀫮
    static let boltBatteryblock = SFSymbol(rawValue: "bolt.batteryblock")

    /// 􀫯
    static let boltBatteryblockFill = SFSymbol(rawValue: "bolt.batteryblock.fill")

    /// 􁄲
    static let boltCarCircle = SFSymbol(rawValue: "bolt.car.circle")

    /// 􁄳
    static let boltCarCircleFill = SFSymbol(rawValue: "bolt.car.circle.fill")

    /// 􁃗
    static let boltShield = SFSymbol(rawValue: "bolt.shield")

    /// 􁃘
    static let boltShieldFill = SFSymbol(rawValue: "bolt.shield.fill")

    /// 􀼵
    static let boltSquare = SFSymbol(rawValue: "bolt.square")

    /// 􀼶
    static let boltSquareFill = SFSymbol(rawValue: "bolt.square.fill")

    /// 􁇣
    static let bookClosedCircle = SFSymbol(rawValue: "book.closed.circle")

    /// 􁇤
    static let bookClosedCircleFill = SFSymbol(rawValue: "book.closed.circle.fill")

    /// 􀼹
    static let bookmarkSquare = SFSymbol(rawValue: "bookmark.square")

    /// 􀼺
    static let bookmarkSquareFill = SFSymbol(rawValue: "bookmark.square.fill")

    /// 􁆼
    static let booksVerticalCircle = SFSymbol(rawValue: "books.vertical.circle")

    /// 􁆽
    static let booksVerticalCircleFill = SFSymbol(rawValue: "books.vertical.circle.fill")

    /// 􀯐
    static let brain = SFSymbol(rawValue: "brain")

    /// 􀯏
    static let brainHeadProfile = SFSymbol(rawValue: "brain.head.profile")

    /// 􀷡
    static let briefcaseCircle = SFSymbol(rawValue: "briefcase.circle")

    /// 􀷢
    static let briefcaseCircleFill = SFSymbol(rawValue: "briefcase.circle.fill")

    /// 􁃒
    static let bubbleLeftAndExclamationmarkBubbleRight = SFSymbol(rawValue: "bubble.left.and.exclamationmark.bubble.right")

    /// 􁃓
    static let bubbleLeftAndExclamationmarkBubbleRightFill = SFSymbol(rawValue: "bubble.left.and.exclamationmark.bubble.right.fill")

    /// 􁇐
    static let bubbleLeftCircle = SFSymbol(rawValue: "bubble.left.circle")

    /// 􁇑
    static let bubbleLeftCircleFill = SFSymbol(rawValue: "bubble.left.circle.fill")

    /// 􁇎
    static let bubbleRightCircle = SFSymbol(rawValue: "bubble.right.circle")

    /// 􁇏
    static let bubbleRightCircleFill = SFSymbol(rawValue: "bubble.right.circle.fill")

    /// 􁇆
    static let buildingColumnsCircle = SFSymbol(rawValue: "building.columns.circle")

    /// 􁇇
    static let buildingColumnsCircleFill = SFSymbol(rawValue: "building.columns.circle.fill")

    /// 􀺦
    static let cableConnector = SFSymbol(rawValue: "cable.connector")

    /// 􀴞
    static let cableConnectorHorizontal = SFSymbol(rawValue: "cable.connector.horizontal")

    /// 􀷶
    static let cablecar = SFSymbol(rawValue: "cablecar")

    /// 􀷷
    static let cablecarFill = SFSymbol(rawValue: "cablecar.fill")

    /// 􁁃
    static let calendarDayTimelineLeading = SFSymbol(rawValue: "calendar.day.timeline.leading")

    /// 􀻤
    static let calendarDayTimelineLeft = SFSymbol(rawValue: "calendar.day.timeline.left")

    /// 􀻣
    static let calendarDayTimelineRight = SFSymbol(rawValue: "calendar.day.timeline.right")

    /// 􁁂
    static let calendarDayTimelineTrailing = SFSymbol(rawValue: "calendar.day.timeline.trailing")

    /// 􀹺
    static let cameraShutterButton = SFSymbol(rawValue: "camera.shutter.button")

    /// 􀹻
    static let cameraShutterButtonFill = SFSymbol(rawValue: "camera.shutter.button.fill")

    /// 􀿶
    static let capsuleBottomhalfFilled = SFSymbol(rawValue: "capsule.bottomhalf.filled")

    /// 􀾚
    static let capsuleInsetFilled = SFSymbol(rawValue: "capsule.inset.filled")

    /// 􀿳
    static let capsuleLefthalfFilled = SFSymbol(rawValue: "capsule.lefthalf.filled")

    /// 􀿺
    static let capsulePortraitBottomhalfFilled = SFSymbol(rawValue: "capsule.portrait.bottomhalf.filled")

    /// 􀾛
    static let capsulePortraitInsetFilled = SFSymbol(rawValue: "capsule.portrait.inset.filled")

    /// 􀿷
    static let capsulePortraitLefthalfFilled = SFSymbol(rawValue: "capsule.portrait.lefthalf.filled")

    /// 􀿸
    static let capsulePortraitRighthalfFilled = SFSymbol(rawValue: "capsule.portrait.righthalf.filled")

    /// 􀿹
    static let capsulePortraitTophalfFilled = SFSymbol(rawValue: "capsule.portrait.tophalf.filled")

    /// 􀿴
    static let capsuleRighthalfFilled = SFSymbol(rawValue: "capsule.righthalf.filled")

    /// 􀿵
    static let capsuleTophalfFilled = SFSymbol(rawValue: "capsule.tophalf.filled")

    /// 􀸌
    static let carFerry = SFSymbol(rawValue: "car.ferry")

    /// 􀸍
    static let carFerryFill = SFSymbol(rawValue: "car.ferry.fill")

    /// 􀑁
    static let chartLineUptrendXyaxis = SFSymbol(rawValue: "chart.line.uptrend.xyaxis")

    /// 􀴚
    static let chartLineUptrendXyaxisCircle = SFSymbol(rawValue: "chart.line.uptrend.xyaxis.circle")

    /// 􀴛
    static let chartLineUptrendXyaxisCircleFill = SFSymbol(rawValue: "chart.line.uptrend.xyaxis.circle.fill")

    /// 􁂥
    static let chartXyaxisLine = SFSymbol(rawValue: "chart.xyaxis.line")

    /// 􀵔
    static let checkerboardShield = SFSymbol(rawValue: "checkerboard.shield")

    /// 􀷾
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Right-To-Left
    static let checklist = SFSymbol(rawValue: "checklist")

    /// 􀿋
    static let checkmarkBubble = SFSymbol(rawValue: "checkmark.bubble")

    /// 􀿌
    static let checkmarkBubbleFill = SFSymbol(rawValue: "checkmark.bubble.fill")

    /// 􁃎
    static let checkmarkCircleTrianglebadgeExclamationmark = SFSymbol(rawValue: "checkmark.circle.trianglebadge.exclamationmark")

    /// 􁁚
    static let checkmarkDiamond = SFSymbol(rawValue: "checkmark.diamond")

    /// 􁁛
    static let checkmarkDiamondFill = SFSymbol(rawValue: "checkmark.diamond.fill")

    /// 􀙚
    static let chevronLeftForwardslashChevronRight = SFSymbol(rawValue: "chevron.left.forwardslash.chevron.right")

    /// 􀠌
    static let circleAndLineHorizontal = SFSymbol(rawValue: "circle.and.line.horizontal")

    /// 􀞍
    static let circleAndLineHorizontalFill = SFSymbol(rawValue: "circle.and.line.horizontal.fill")

    /// 􀪖
    static let circleBottomhalfFilled = SFSymbol(rawValue: "circle.bottomhalf.filled")

    /// 􀧒
    static let circleDashedInsetFilled = SFSymbol(rawValue: "circle.dashed.inset.filled")

    /// 􁅃
    static let circleDotted = SFSymbol(rawValue: "circle.dotted")

    /// 􀺇
    static let circleGrid2x1 = SFSymbol(rawValue: "circle.grid.2x1")

    /// 􀺈
    static let circleGrid2x1Fill = SFSymbol(rawValue: "circle.grid.2x1.fill")

    /// 􀺉
    static let circleGrid2x1LeftFilled = SFSymbol(rawValue: "circle.grid.2x1.left.filled")

    /// 􀺊
    static let circleGrid2x1RightFilled = SFSymbol(rawValue: "circle.grid.2x1.right.filled")

    /// 􀺲
    static let circleGrid3x3Circle = SFSymbol(rawValue: "circle.grid.3x3.circle")

    /// 􀺳
    static let circleGrid3x3CircleFill = SFSymbol(rawValue: "circle.grid.3x3.circle.fill")

    /// 􀩇
    static let circleGridCrossDownFilled = SFSymbol(rawValue: "circle.grid.cross.down.filled")

    /// 􀩄
    static let circleGridCrossLeftFilled = SFSymbol(rawValue: "circle.grid.cross.left.filled")

    /// 􀩆
    static let circleGridCrossRightFilled = SFSymbol(rawValue: "circle.grid.cross.right.filled")

    /// 􀩅
    static let circleGridCrossUpFilled = SFSymbol(rawValue: "circle.grid.cross.up.filled")

    /// 􀙢
    static let circleHexagongrid = SFSymbol(rawValue: "circle.hexagongrid")

    /// 􀷙
    static let circleHexagongridCircle = SFSymbol(rawValue: "circle.hexagongrid.circle")

    /// 􀷚
    static let circleHexagongridCircleFill = SFSymbol(rawValue: "circle.hexagongrid.circle.fill")

    /// 􀙣
    static let circleHexagongridFill = SFSymbol(rawValue: "circle.hexagongrid.fill")

    /// 􀬎
    static let circleHexagonpath = SFSymbol(rawValue: "circle.hexagonpath")

    /// 􀬏
    static let circleHexagonpathFill = SFSymbol(rawValue: "circle.hexagonpath.fill")

    /// 􀝜
    static let circleInsetFilled = SFSymbol(rawValue: "circle.inset.filled")

    /// 􀀂
    static let circleLefthalfFilled = SFSymbol(rawValue: "circle.lefthalf.filled")

    /// 􀀃
    static let circleRighthalfFilled = SFSymbol(rawValue: "circle.righthalf.filled")

    /// 􀻃
    static let circleSlash = SFSymbol(rawValue: "circle.slash")

    /// 􀻄
    static let circleSlashFill = SFSymbol(rawValue: "circle.slash.fill")

    /// 􀧻
    static let circleSquareFill = SFSymbol(rawValue: "circle.square.fill")

    /// 􀪗
    static let circleTophalfFilled = SFSymbol(rawValue: "circle.tophalf.filled")

    /// 􀹴
    static let clockBadgeCheckmark = SFSymbol(rawValue: "clock.badge.checkmark")

    /// 􀹵
    static let clockBadgeCheckmarkFill = SFSymbol(rawValue: "clock.badge.checkmark.fill")

    /// 􀹶
    static let clockBadgeExclamationmark = SFSymbol(rawValue: "clock.badge.exclamationmark")

    /// 􀹷
    static let clockBadgeExclamationmarkFill = SFSymbol(rawValue: "clock.badge.exclamationmark.fill")

    /// 􁆸
    static let clockCircle = SFSymbol(rawValue: "clock.circle")

    /// 􁆹
    static let clockCircleFill = SFSymbol(rawValue: "clock.circle.fill")

    /// 􀺣
    static let computermouse = SFSymbol(rawValue: "computermouse")

    /// 􀺤
    static let computermouseFill = SFSymbol(rawValue: "computermouse.fill")

    /// 􀧓
    static let cpuFill = SFSymbol(rawValue: "cpu.fill")

    /// 􁂨
    static let creditcardAnd123 = SFSymbol(rawValue: "creditcard.and.123")

    /// 􁄭
    static let creditcardTrianglebadgeExclamationmark = SFSymbol(rawValue: "creditcard.trianglebadge.exclamationmark")

    /// 􀼘
    static let crossVial = SFSymbol(rawValue: "cross.vial")

    /// 􀼙
    static let crossVialFill = SFSymbol(rawValue: "cross.vial.fill")

    /// 􀸘
    static let cupAndSaucer = SFSymbol(rawValue: "cup.and.saucer")

    /// 􀸙
    static let cupAndSaucerFill = SFSymbol(rawValue: "cup.and.saucer.fill")

    /// 􁂈
    static let deleteBackward = SFSymbol(rawValue: "delete.backward")

    /// 􁂉
    static let deleteBackwardFill = SFSymbol(rawValue: "delete.backward.fill")

    /// 􁂒
    static let deleteForward = SFSymbol(rawValue: "delete.forward")

    /// 􁂓
    static let deleteForwardFill = SFSymbol(rawValue: "delete.forward.fill")

    /// 􀶾
    static let desktopcomputerAndArrowDown = SFSymbol(rawValue: "desktopcomputer.and.arrow.down")

    /// 􁃃
    static let desktopcomputerTrianglebadgeExclamationmark = SFSymbol(rawValue: "desktopcomputer.trianglebadge.exclamationmark")

    /// 􁀆
    static let diamondBottomhalfFilled = SFSymbol(rawValue: "diamond.bottomhalf.filled")

    /// 􁇡
    static let diamondCircle = SFSymbol(rawValue: "diamond.circle")

    /// 􁇢
    static let diamondCircleFill = SFSymbol(rawValue: "diamond.circle.fill")

    /// 􀾗
    static let diamondInsetFilled = SFSymbol(rawValue: "diamond.inset.filled")

    /// 􁀃
    static let diamondLefthalfFilled = SFSymbol(rawValue: "diamond.lefthalf.filled")

    /// 􁀄
    static let diamondRighthalfFilled = SFSymbol(rawValue: "diamond.righthalf.filled")

    /// 􁀅
    static let diamondTophalfFilled = SFSymbol(rawValue: "diamond.tophalf.filled")

    /// 􀺴
    static let dice = SFSymbol(rawValue: "dice")

    /// 􀺵
    static let diceFill = SFSymbol(rawValue: "dice.fill")

    /// 􀻖
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownArrowClockwise = SFSymbol(rawValue: "digitalcrown.arrow.clockwise")

    /// 􀻗
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownArrowClockwiseFill = SFSymbol(rawValue: "digitalcrown.arrow.clockwise.fill")

    /// 􀻘
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownArrowCounterclockwise = SFSymbol(rawValue: "digitalcrown.arrow.counterclockwise")

    /// 􀻙
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownArrowCounterclockwiseFill = SFSymbol(rawValue: "digitalcrown.arrow.counterclockwise.fill")

    /// 􀻱
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownHorizontalArrowClockwise = SFSymbol(rawValue: "digitalcrown.horizontal.arrow.clockwise")

    /// 􀻲
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownHorizontalArrowClockwiseFill = SFSymbol(rawValue: "digitalcrown.horizontal.arrow.clockwise.fill")

    /// 􀻳
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownHorizontalArrowCounterclockwise = SFSymbol(rawValue: "digitalcrown.horizontal.arrow.counterclockwise")

    /// 􀻴
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownHorizontalArrowCounterclockwiseFill = SFSymbol(rawValue: "digitalcrown.horizontal.arrow.counterclockwise.fill")

    /// 􀴣
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownHorizontalPress = SFSymbol(rawValue: "digitalcrown.horizontal.press")

    /// 􀴤
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownHorizontalPressFill = SFSymbol(rawValue: "digitalcrown.horizontal.press.fill")

    /// 􀴡
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownPress = SFSymbol(rawValue: "digitalcrown.press")

    /// 􀴢
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Digital Crown.
    static let digitalcrownPressFill = SFSymbol(rawValue: "digitalcrown.press.fill")

    /// 􀶽
    static let displayAndArrowDown = SFSymbol(rawValue: "display.and.arrow.down")

    /// 􀩽
    static let docTextImage = SFSymbol(rawValue: "doc.text.image")

    /// 􀩾
    static let docTextImageFill = SFSymbol(rawValue: "doc.text.image.fill")

    /// 􀎾
    static let docViewfinder = SFSymbol(rawValue: "doc.viewfinder")

    /// 􀡢
    static let docViewfinderFill = SFSymbol(rawValue: "doc.viewfinder.fill")

    /// 􀺪
    static let dotCircleAndHandPointUpLeftFill = SFSymbol(rawValue: "dot.circle.and.hand.point.up.left.fill")

    /// 􁇞
    static let dotCircleViewfinder = SFSymbol(rawValue: "dot.circle.viewfinder")

    /// 􀼗
    static let dotRadiowavesUpForward = SFSymbol(rawValue: "dot.radiowaves.up.forward")

    /// 􁇝
    static let dotViewfinder = SFSymbol(rawValue: "dot.viewfinder")

    /// 􀨀
    static let dpadDownFilled = SFSymbol(rawValue: "dpad.down.filled")

    /// 􀧽
    static let dpadLeftFilled = SFSymbol(rawValue: "dpad.left.filled")

    /// 􀧿
    static let dpadRightFilled = SFSymbol(rawValue: "dpad.right.filled")

    /// 􀧾
    static let dpadUpFilled = SFSymbol(rawValue: "dpad.up.filled")

    /// 􁇊
    static let dropCircle = SFSymbol(rawValue: "drop.circle")

    /// 􁇋
    static let dropCircleFill = SFSymbol(rawValue: "drop.circle.fill")

    /// 􀵣
    static let earAndWaveform = SFSymbol(rawValue: "ear.and.waveform")

    /// 􀸸
    static let earbuds = SFSymbol(rawValue: "earbuds")

    /// 􀹥
    static let earbudsCase = SFSymbol(rawValue: "earbuds.case")

    /// 􀹦
    static let earbudsCaseFill = SFSymbol(rawValue: "earbuds.case.fill")

    /// 􁇵
    static let ellipsisCurlybraces = SFSymbol(rawValue: "ellipsis.curlybraces")

    /// 􁁟
    static let ellipsisVerticalBubble = SFSymbol(rawValue: "ellipsis.vertical.bubble")

    /// 􁁠
    static let ellipsisVerticalBubbleFill = SFSymbol(rawValue: "ellipsis.vertical.bubble.fill")

    /// 􀫙
    static let envelopeBadgeShieldHalfFilled = SFSymbol(rawValue: "envelope.badge.shield.half.filled")

    /// 􀫚
    static let envelopeBadgeShieldHalfFilledFill = SFSymbol(rawValue: "envelope.badge.shield.half.filled.fill")

    /// 􁆶
    static let exclamationmarkBubbleCircle = SFSymbol(rawValue: "exclamationmark.bubble.circle")

    /// 􁆷
    static let exclamationmarkBubbleCircleFill = SFSymbol(rawValue: "exclamationmark.bubble.circle.fill")

    /// 􀜁
    static let eyeSlashCircle = SFSymbol(rawValue: "eye.slash.circle")

    /// 􀜂
    static let eyeSlashCircleFill = SFSymbol(rawValue: "eye.slash.circle.fill")

    /// 􀽇
    static let eyeSquare = SFSymbol(rawValue: "eye.square")

    /// 􀽈
    static let eyeSquareFill = SFSymbol(rawValue: "eye.square.fill")

    /// 􁂔
    static let eyeTrianglebadgeExclamationmark = SFSymbol(rawValue: "eye.trianglebadge.exclamationmark")

    /// 􁂕
    static let eyeTrianglebadgeExclamationmarkFill = SFSymbol(rawValue: "eye.trianglebadge.exclamationmark.fill")

    /// 􁃌
    static let facemask = SFSymbol(rawValue: "facemask")

    /// 􁃍
    static let facemaskFill = SFSymbol(rawValue: "facemask.fill")

    /// 􁁋
    static let fanblades = SFSymbol(rawValue: "fanblades")

    /// 􁁌
    static let fanbladesFill = SFSymbol(rawValue: "fanblades.fill")

    /// 􀸅
    static let ferry = SFSymbol(rawValue: "ferry")

    /// 􀸆
    static let ferryFill = SFSymbol(rawValue: "ferry.fill")

    /// 􀥢
    static let fibrechannel = SFSymbol(rawValue: "fibrechannel")

    /// 􁈑
    static let figureRoll = SFSymbol(rawValue: "figure.roll")

    /// 􀸊
    static let filmCircle = SFSymbol(rawValue: "film.circle")

    /// 􀸋
    static let filmCircleFill = SFSymbol(rawValue: "film.circle.fill")

    /// 􀶶
    static let flag2Crossed = SFSymbol(rawValue: "flag.2.crossed")

    /// 􀶷
    static let flag2CrossedFill = SFSymbol(rawValue: "flag.2.crossed.fill")

    /// 􁁜
    static let flagAndFlagFilledCrossed = SFSymbol(rawValue: "flag.and.flag.filled.crossed")

    /// 􀶸
    static let flagFilledAndFlagCrossed = SFSymbol(rawValue: "flag.filled.and.flag.crossed")

    /// 􀼳
    static let flagSquare = SFSymbol(rawValue: "flag.square")

    /// 􀼴
    static let flagSquareFill = SFSymbol(rawValue: "flag.square.fill")

    /// 􁇒
    static let flameCircle = SFSymbol(rawValue: "flame.circle")

    /// 􁇓
    static let flameCircleFill = SFSymbol(rawValue: "flame.circle.fill")

    /// 􀣍
    static let folderBadgeGearshape = SFSymbol(rawValue: "folder.badge.gearshape")

    /// 􀣎
    static let folderFillBadgeGearshape = SFSymbol(rawValue: "folder.fill.badge.gearshape")

    /// 􀸩
    static let forkKnife = SFSymbol(rawValue: "fork.knife")

    /// 􀸹
    static let forkKnifeCircle = SFSymbol(rawValue: "fork.knife.circle")

    /// 􀸺
    static let forkKnifeCircleFill = SFSymbol(rawValue: "fork.knife.circle.fill")

    /// 􀺅
    static let forwardCircle = SFSymbol(rawValue: "forward.circle")

    /// 􀺆
    static let forwardCircleFill = SFSymbol(rawValue: "forward.circle.fill")

    /// 􀵞
    static let fuelpump = SFSymbol(rawValue: "fuelpump")

    /// 􀵠
    static let fuelpumpCircle = SFSymbol(rawValue: "fuelpump.circle")

    /// 􀵡
    static let fuelpumpCircleFill = SFSymbol(rawValue: "fuelpump.circle.fill")

    /// 􀵟
    static let fuelpumpFill = SFSymbol(rawValue: "fuelpump.fill")

    /// 􁅦
    static let gearBadgeCheckmark = SFSymbol(rawValue: "gear.badge.checkmark")

    /// 􁅨
    static let gearBadgeQuestionmark = SFSymbol(rawValue: "gear.badge.questionmark")

    /// 􁅧
    static let gearBadgeXmark = SFSymbol(rawValue: "gear.badge.xmark")

    /// 􀺺
    static let gearCircle = SFSymbol(rawValue: "gear.circle")

    /// 􀺻
    static let gearCircleFill = SFSymbol(rawValue: "gear.circle.fill")

    /// 􀺼
    static let gearshapeCircle = SFSymbol(rawValue: "gearshape.circle")

    /// 􀺽
    static let gearshapeCircleFill = SFSymbol(rawValue: "gearshape.circle.fill")

    /// 􀵱
    static let globeAmericas = SFSymbol(rawValue: "globe.americas")

    /// 􀵲
    static let globeAmericasFill = SFSymbol(rawValue: "globe.americas.fill")

    /// 􀵵
    static let globeAsiaAustralia = SFSymbol(rawValue: "globe.asia.australia")

    /// 􀵶
    static let globeAsiaAustraliaFill = SFSymbol(rawValue: "globe.asia.australia.fill")

    /// 􁅍
    static let globeBadgeChevronBackward = SFSymbol(rawValue: "globe.badge.chevron.backward")

    /// 􀵳
    static let globeEuropeAfrica = SFSymbol(rawValue: "globe.europe.africa")

    /// 􀵴
    static let globeEuropeAfricaFill = SFSymbol(rawValue: "globe.europe.africa.fill")

    /// 􀶱
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Arabic, Hindi
    static let gobackward5 = SFSymbol(rawValue: "gobackward.5")

    /// 􀶰
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Arabic, Hindi
    static let goforward5 = SFSymbol(rawValue: "goforward.5")

    /// 􁆾
    static let graduationcapCircle = SFSymbol(rawValue: "graduationcap.circle")

    /// 􁆿
    static let graduationcapCircleFill = SFSymbol(rawValue: "graduationcap.circle.fill")

    /// 􀭝
    static let hSquareOnSquareFill = SFSymbol(rawValue: "h.square.on.square.fill")

    /// 􀷔
    static let hammerCircle = SFSymbol(rawValue: "hammer.circle")

    /// 􀷕
    static let hammerCircleFill = SFSymbol(rawValue: "hammer.circle.fill")

    /// 􀷊
    static let handRaisedCircle = SFSymbol(rawValue: "hand.raised.circle")

    /// 􀷋
    static let handRaisedCircleFill = SFSymbol(rawValue: "hand.raised.circle.fill")

    /// 􀽓
    static let handRaisedSquare = SFSymbol(rawValue: "hand.raised.square")

    /// 􀽔
    static let handRaisedSquareFill = SFSymbol(rawValue: "hand.raised.square.fill")

    /// 􀴨
    static let handRaisedSquareOnSquare = SFSymbol(rawValue: "hand.raised.square.on.square")

    /// 􀴩
    static let handRaisedSquareOnSquareFill = SFSymbol(rawValue: "hand.raised.square.on.square.fill")

    /// 􀷟
    static let handThumbsdownCircle = SFSymbol(rawValue: "hand.thumbsdown.circle")

    /// 􀷠
    static let handThumbsdownCircleFill = SFSymbol(rawValue: "hand.thumbsdown.circle.fill")

    /// 􀷝
    static let handThumbsupCircle = SFSymbol(rawValue: "hand.thumbsup.circle")

    /// 􀷞
    static let handThumbsupCircleFill = SFSymbol(rawValue: "hand.thumbsup.circle.fill")

    /// 􀪓
    static let hearingdeviceEar = SFSymbol(rawValue: "hearingdevice.ear")

    /// 􁃪
    static let heartRectangle = SFSymbol(rawValue: "heart.rectangle")

    /// 􁃫
    static let heartRectangleFill = SFSymbol(rawValue: "heart.rectangle.fill")

    /// 􀼱
    static let heartSquare = SFSymbol(rawValue: "heart.square")

    /// 􀼲
    static let heartSquareFill = SFSymbol(rawValue: "heart.square.fill")

    /// 􁀿
    static let hexagonBottomhalfFilled = SFSymbol(rawValue: "hexagon.bottomhalf.filled")

    /// 􁀉
    static let hexagonLefthalfFilled = SFSymbol(rawValue: "hexagon.lefthalf.filled")

    /// 􁀊
    static let hexagonRighthalfFilled = SFSymbol(rawValue: "hexagon.righthalf.filled")

    /// 􁀾
    static let hexagonTophalfFilled = SFSymbol(rawValue: "hexagon.tophalf.filled")

    /// 􀻻
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let hifispeakerAndAppletv = SFSymbol(rawValue: "hifispeaker.and.appletv")

    /// 􀻼
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple TV.
    static let hifispeakerAndAppletvFill = SFSymbol(rawValue: "hifispeaker.and.appletv.fill")

    /// 􀺌
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s HomePod and Apple TV.
    static let homepodAndAppletv = SFSymbol(rawValue: "homepod.and.appletv")

    /// 􀺍
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s HomePod and Apple TV.
    static let homepodAndAppletvFill = SFSymbol(rawValue: "homepod.and.appletv.fill")

    /// 􀻹
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s HomePod mini and Apple TV.
    static let homepodminiAndAppletv = SFSymbol(rawValue: "homepodmini.and.appletv")

    /// 􀻺
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s HomePod mini and Apple TV.
    static let homepodminiAndAppletvFill = SFSymbol(rawValue: "homepodmini.and.appletv.fill")

    /// 􀖈
    static let hourglassBottomhalfFilled = SFSymbol(rawValue: "hourglass.bottomhalf.filled")

    /// 􁇛
    static let hourglassCircle = SFSymbol(rawValue: "hourglass.circle")

    /// 􁇜
    static let hourglassCircleFill = SFSymbol(rawValue: "hourglass.circle.fill")

    /// 􀖉
    static let hourglassTophalfFilled = SFSymbol(rawValue: "hourglass.tophalf.filled")

    /// 􁃚
    static let humidity = SFSymbol(rawValue: "humidity")

    /// 􁃛
    static let humidityFill = SFSymbol(rawValue: "humidity.fill")

    /// 􀽑
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iCloud service.
    static let icloudSquare = SFSymbol(rawValue: "icloud.square")

    /// 􀽒
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iCloud service.
    static let icloudSquareFill = SFSymbol(rawValue: "icloud.square.fill")

    /// 􀷀
    static let ipadAndArrowForward = SFSymbol(rawValue: "ipad.and.arrow.forward")

    /// 􁄟
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPad and iPhone.
    static let ipadAndIphone = SFSymbol(rawValue: "ipad.and.iphone")

    /// 􁀲
    static let ipadRearCamera = SFSymbol(rawValue: "ipad.rear.camera")

    /// 􀶼
    static let iphoneAndArrowForward = SFSymbol(rawValue: "iphone.and.arrow.forward")

    /// 􁄩
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneCircle = SFSymbol(rawValue: "iphone.circle")

    /// 􁄪
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneCircleFill = SFSymbol(rawValue: "iphone.circle.fill")

    /// 􁄥
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneHomebuttonCircle = SFSymbol(rawValue: "iphone.homebutton.circle")

    /// 􁄦
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneHomebuttonCircleFill = SFSymbol(rawValue: "iphone.homebutton.circle.fill")

    /// 􁅚
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneHomebuttonRadiowavesLeftAndRightCircle = SFSymbol(rawValue: "iphone.homebutton.radiowaves.left.and.right.circle")

    /// 􁅛
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneHomebuttonRadiowavesLeftAndRightCircleFill = SFSymbol(rawValue: "iphone.homebutton.radiowaves.left.and.right.circle.fill")

    /// 􁄧
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneHomebuttonSlashCircle = SFSymbol(rawValue: "iphone.homebutton.slash.circle")

    /// 􁄨
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneHomebuttonSlashCircleFill = SFSymbol(rawValue: "iphone.homebutton.slash.circle.fill")

    /// 􁅜
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneRadiowavesLeftAndRightCircle = SFSymbol(rawValue: "iphone.radiowaves.left.and.right.circle")

    /// 􁅝
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneRadiowavesLeftAndRightCircleFill = SFSymbol(rawValue: "iphone.radiowaves.left.and.right.circle.fill")

    /// 􀾖
    static let iphoneRearCamera = SFSymbol(rawValue: "iphone.rear.camera")

    /// 􁄫
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneSlashCircle = SFSymbol(rawValue: "iphone.slash.circle")

    /// 􁄬
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone.
    static let iphoneSlashCircleFill = SFSymbol(rawValue: "iphone.slash.circle.fill")

    /// 􀺐
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone Smart Battery Case.
    static let iphoneSmartbatterycaseGen1 = SFSymbol(rawValue: "iphone.smartbatterycase.gen1")

    /// 􀺏
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPhone Smart Battery Case.
    static let iphoneSmartbatterycaseGen2 = SFSymbol(rawValue: "iphone.smartbatterycase.gen2")

    /// 􁂲
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s iPod touch.
    static let ipodtouchSlash = SFSymbol(rawValue: "ipodtouch.slash")

    /// 􀼍
    static let ivfluidBag = SFSymbol(rawValue: "ivfluid.bag")

    /// 􀼎
    static let ivfluidBagFill = SFSymbol(rawValue: "ivfluid.bag.fill")

    /// 􀭛
    static let jSquareOnSquareFill = SFSymbol(rawValue: "j.square.on.square.fill")

    /// 􀺑
    static let keyboardFill = SFSymbol(rawValue: "keyboard.fill")

    /// 􀦔
    static let lJoystickPressDown = SFSymbol(rawValue: "l.joystick.press.down")

    /// 􀫃
    static let lJoystickPressDownFill = SFSymbol(rawValue: "l.joystick.press.down.fill")

    /// 􀿜
    static let lJoystickTiltDown = SFSymbol(rawValue: "l.joystick.tilt.down")

    /// 􀿝
    static let lJoystickTiltDownFill = SFSymbol(rawValue: "l.joystick.tilt.down.fill")

    /// 􀿖
    static let lJoystickTiltLeft = SFSymbol(rawValue: "l.joystick.tilt.left")

    /// 􀿗
    static let lJoystickTiltLeftFill = SFSymbol(rawValue: "l.joystick.tilt.left.fill")

    /// 􀿘
    static let lJoystickTiltRight = SFSymbol(rawValue: "l.joystick.tilt.right")

    /// 􀿙
    static let lJoystickTiltRightFill = SFSymbol(rawValue: "l.joystick.tilt.right.fill")

    /// 􀿚
    static let lJoystickTiltUp = SFSymbol(rawValue: "l.joystick.tilt.up")

    /// 􀿛
    static let lJoystickTiltUpFill = SFSymbol(rawValue: "l.joystick.tilt.up.fill")

    /// 􀰵
    static let lanyardcard = SFSymbol(rawValue: "lanyardcard")

    /// 􀰶
    static let lanyardcardFill = SFSymbol(rawValue: "lanyardcard.fill")

    /// 􀶿
    static let laptopcomputerAndArrowDown = SFSymbol(rawValue: "laptopcomputer.and.arrow.down")

    /// 􁃂
    static let laptopcomputerTrianglebadgeExclamationmark = SFSymbol(rawValue: "laptopcomputer.trianglebadge.exclamationmark")

    /// 􀣳
    static let lassoAndSparkles = SFSymbol(rawValue: "lasso.and.sparkles")

    /// 􁂬
    static let leafCircle = SFSymbol(rawValue: "leaf.circle")

    /// 􁂭
    static let leafCircleFill = SFSymbol(rawValue: "leaf.circle.fill")

    /// 􁇖
    static let lightbulbCircle = SFSymbol(rawValue: "lightbulb.circle")

    /// 􁇗
    static let lightbulbCircleFill = SFSymbol(rawValue: "lightbulb.circle.fill")

    /// 􀘵
    static let line2HorizontalDecreaseCircle = SFSymbol(rawValue: "line.2.horizontal.decrease.circle")

    /// 􀘶
    static let line2HorizontalDecreaseCircleFill = SFSymbol(rawValue: "line.2.horizontal.decrease.circle.fill")

    /// 􀌇
    static let line3Horizontal = SFSymbol(rawValue: "line.3.horizontal")

    /// 􀧱
    static let line3HorizontalCircle = SFSymbol(rawValue: "line.3.horizontal.circle")

    /// 􀧲
    static let line3HorizontalCircleFill = SFSymbol(rawValue: "line.3.horizontal.circle.fill")

    /// 􀜓
    static let line3HorizontalDecrease = SFSymbol(rawValue: "line.3.horizontal.decrease")

    /// 􀌈
    static let line3HorizontalDecreaseCircle = SFSymbol(rawValue: "line.3.horizontal.decrease.circle")

    /// 􀌉
    static let line3HorizontalDecreaseCircleFill = SFSymbol(rawValue: "line.3.horizontal.decrease.circle.fill")

    /// 􀰬
    static let linesMeasurementHorizontal = SFSymbol(rawValue: "lines.measurement.horizontal")

    /// 􀻧
    static let listBulletCircle = SFSymbol(rawValue: "list.bullet.circle")

    /// 􀻨
    static let listBulletCircleFill = SFSymbol(rawValue: "list.bullet.circle.fill")

    /// 􀺿
    static let listBulletRectangleFill = SFSymbol(rawValue: "list.bullet.rectangle.fill")

    /// 􀹲
    static let listBulletRectanglePortrait = SFSymbol(rawValue: "list.bullet.rectangle.portrait")

    /// 􀹳
    static let listBulletRectanglePortraitFill = SFSymbol(rawValue: "list.bullet.rectangle.portrait.fill")

    /// 􀹆
    static let listDashHeaderRectangle = SFSymbol(rawValue: "list.dash.header.rectangle")

    /// 􁈟
    static let locationMagnifyingglass = SFSymbol(rawValue: "location.magnifyingglass")

    /// 􀷌
    static let locationNorthCircle = SFSymbol(rawValue: "location.north.circle")

    /// 􀷍
    static let locationNorthCircleFill = SFSymbol(rawValue: "location.north.circle.fill")

    /// 􀼻
    static let locationSquare = SFSymbol(rawValue: "location.square")

    /// 􀼼
    static let locationSquareFill = SFSymbol(rawValue: "location.square.fill")

    /// 􀼒
    static let lockDesktopcomputer = SFSymbol(rawValue: "lock.desktopcomputer")

    /// 􀼑
    static let lockDisplay = SFSymbol(rawValue: "lock.display")

    /// 􀼕
    static let lockIpad = SFSymbol(rawValue: "lock.ipad")

    /// 􀼔
    static let lockIphone = SFSymbol(rawValue: "lock.iphone")

    /// 􀼓
    static let lockLaptopcomputer = SFSymbol(rawValue: "lock.laptopcomputer")

    /// 􀼡
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let lockOpenApplewatch = SFSymbol(rawValue: "lock.open.applewatch")

    /// 􀼝
    static let lockOpenDesktopcomputer = SFSymbol(rawValue: "lock.open.desktopcomputer")

    /// 􀼜
    static let lockOpenDisplay = SFSymbol(rawValue: "lock.open.display")

    /// 􀼠
    static let lockOpenIpad = SFSymbol(rawValue: "lock.open.ipad")

    /// 􀼟
    static let lockOpenIphone = SFSymbol(rawValue: "lock.open.iphone")

    /// 􀼞
    static let lockOpenLaptopcomputer = SFSymbol(rawValue: "lock.open.laptopcomputer")

    /// 􀾈
    /// ⚠️ This symbol may not be modified and may only be used to refer to Sony’s Playstation.
    static let logoPlaystation = SFSymbol(rawValue: "logo.playstation")

    /// 􀾉
    /// ⚠️ This symbol may not be modified and may only be used to refer to Microsoft’s Xbox.
    static let logoXbox = SFSymbol(rawValue: "logo.xbox")

    /// 􀼢
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Mac Pro.
    static let macproGen1Fill = SFSymbol(rawValue: "macpro.gen1.fill")

    /// 􀼣
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Mac Pro.
    static let macproGen3Fill = SFSymbol(rawValue: "macpro.gen3.fill")

    /// 􁂾
    static let magazine = SFSymbol(rawValue: "magazine")

    /// 􁂿
    static let magazineFill = SFSymbol(rawValue: "magazine.fill")

    /// 􀺰
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Magic Mouse.
    static let magicmouse = SFSymbol(rawValue: "magicmouse")

    /// 􀺱
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Magic Mouse.
    static let magicmouseFill = SFSymbol(rawValue: "magicmouse.fill")

    /// 􀺓
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s MagSafe Battery Pack.
    static let magsafeBatterypack = SFSymbol(rawValue: "magsafe.batterypack")

    /// 􀺔
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s MagSafe Battery Pack.
    static let magsafeBatterypackFill = SFSymbol(rawValue: "magsafe.batterypack.fill")

    /// 􀻫
    static let mapCircle = SFSymbol(rawValue: "map.circle")

    /// 􀻬
    static let mapCircleFill = SFSymbol(rawValue: "map.circle.fill")

    /// 􁇯
    static let mappinSlashCircle = SFSymbol(rawValue: "mappin.slash.circle")

    /// 􁇰
    static let mappinSlashCircleFill = SFSymbol(rawValue: "mappin.slash.circle.fill")

    /// 􀽕
    static let mappinSquare = SFSymbol(rawValue: "mappin.square")

    /// 􀽖
    static let mappinSquareFill = SFSymbol(rawValue: "mappin.square.fill")

    /// 􀺥
    static let mediastick = SFSymbol(rawValue: "mediastick")

    /// 􀧖
    static let memorychipFill = SFSymbol(rawValue: "memorychip.fill")

    /// 􀻒
    static let menucard = SFSymbol(rawValue: "menucard")

    /// 􀻓
    static let menucardFill = SFSymbol(rawValue: "menucard.fill")

    /// 􀼁
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let messageAndWaveform = SFSymbol(rawValue: "message.and.waveform")

    /// 􀼂
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Messages app.
    static let messageAndWaveformFill = SFSymbol(rawValue: "message.and.waveform.fill")

    /// 􀺁
    static let micBadgePlus = SFSymbol(rawValue: "mic.badge.plus")

    /// 􀺂
    static let micFillBadgePlus = SFSymbol(rawValue: "mic.fill.badge.plus")

    /// 􀻩
    static let micSlashCircle = SFSymbol(rawValue: "mic.slash.circle")

    /// 􀻪
    static let micSlashCircleFill = SFSymbol(rawValue: "mic.slash.circle.fill")

    /// 􀼿
    static let micSquare = SFSymbol(rawValue: "mic.square")

    /// 􀽀
    static let micSquareFill = SFSymbol(rawValue: "mic.square.fill")

    /// 􀅻
    static let minusForwardslashPlus = SFSymbol(rawValue: "minus.forwardslash.plus")

    /// 􁁑
    static let musicMicCircle = SFSymbol(rawValue: "music.mic.circle")

    /// 􁁒
    static let musicMicCircleFill = SFSymbol(rawValue: "music.mic.circle.fill")

    /// 􀎵
    static let musicNoteTv = SFSymbol(rawValue: "music.note.tv")

    /// 􀒷
    static let musicNoteTvFill = SFSymbol(rawValue: "music.note.tv.fill")

    /// 􁅏
    static let networkBadgeShieldHalfFilled = SFSymbol(rawValue: "network.badge.shield.half.filled")

    /// 􁆴
    static let newspaperCircle = SFSymbol(rawValue: "newspaper.circle")

    /// 􁆵
    static let newspaperCircleFill = SFSymbol(rawValue: "newspaper.circle.fill")

    /// 􁀽
    static let octagonBottomhalfFilled = SFSymbol(rawValue: "octagon.bottomhalf.filled")

    /// 􁀇
    static let octagonLefthalfFilled = SFSymbol(rawValue: "octagon.lefthalf.filled")

    /// 􁀈
    static let octagonRighthalfFilled = SFSymbol(rawValue: "octagon.righthalf.filled")

    /// 􁀼
    static let octagonTophalfFilled = SFSymbol(rawValue: "octagon.tophalf.filled")

    /// 􀿾
    static let ovalBottomhalfFilled = SFSymbol(rawValue: "oval.bottomhalf.filled")

    /// 􀾜
    static let ovalInsetFilled = SFSymbol(rawValue: "oval.inset.filled")

    /// 􀿻
    static let ovalLefthalfFilled = SFSymbol(rawValue: "oval.lefthalf.filled")

    /// 􁀂
    static let ovalPortraitBottomhalfFilled = SFSymbol(rawValue: "oval.portrait.bottomhalf.filled")

    /// 􀾝
    static let ovalPortraitInsetFilled = SFSymbol(rawValue: "oval.portrait.inset.filled")

    /// 􀿿
    static let ovalPortraitLefthalfFilled = SFSymbol(rawValue: "oval.portrait.lefthalf.filled")

    /// 􁀀
    static let ovalPortraitRighthalfFilled = SFSymbol(rawValue: "oval.portrait.righthalf.filled")

    /// 􁀁
    static let ovalPortraitTophalfFilled = SFSymbol(rawValue: "oval.portrait.tophalf.filled")

    /// 􀿼
    static let ovalRighthalfFilled = SFSymbol(rawValue: "oval.righthalf.filled")

    /// 􀿽
    static let ovalTophalfFilled = SFSymbol(rawValue: "oval.tophalf.filled")

    /// 􀸏
    static let parentheses = SFSymbol(rawValue: "parentheses")

    /// 􀵢
    static let parkingsign = SFSymbol(rawValue: "parkingsign")

    /// 􀷁
    static let parkingsignCircle = SFSymbol(rawValue: "parkingsign.circle")

    /// 􀷂
    static let parkingsignCircleFill = SFSymbol(rawValue: "parkingsign.circle.fill")

    /// 􀾞
    static let pawprint = SFSymbol(rawValue: "pawprint")

    /// 􁂰
    static let pawprintCircle = SFSymbol(rawValue: "pawprint.circle")

    /// 􁂱
    static let pawprintCircleFill = SFSymbol(rawValue: "pawprint.circle.fill")

    /// 􀾟
    static let pawprintFill = SFSymbol(rawValue: "pawprint.fill")

    /// 􀺎
    static let peacesign = SFSymbol(rawValue: "peacesign")

    /// 􀶺
    static let pentagon = SFSymbol(rawValue: "pentagon")

    /// 􁀻
    static let pentagonBottomhalfFilled = SFSymbol(rawValue: "pentagon.bottomhalf.filled")

    /// 􀶻
    static let pentagonFill = SFSymbol(rawValue: "pentagon.fill")

    /// 􁀋
    static let pentagonLefthalfFilled = SFSymbol(rawValue: "pentagon.lefthalf.filled")

    /// 􁀌
    static let pentagonRighthalfFilled = SFSymbol(rawValue: "pentagon.righthalf.filled")

    /// 􁀺
    static let pentagonTophalfFilled = SFSymbol(rawValue: "pentagon.tophalf.filled")

    /// 􀓥
    static let person2CropSquareStack = SFSymbol(rawValue: "person.2.crop.square.stack")

    /// 􀓦
    static let person2CropSquareStackFill = SFSymbol(rawValue: "person.2.crop.square.stack.fill")

    /// 􀾌
    static let person2Wave2 = SFSymbol(rawValue: "person.2.wave.2")

    /// 􀾍
    static let person2Wave2Fill = SFSymbol(rawValue: "person.2.wave.2.fill")

    /// 􀻷
    static let person3Sequence = SFSymbol(rawValue: "person.3.sequence")

    /// 􀻸
    static let person3SequenceFill = SFSymbol(rawValue: "person.3.sequence.fill")

    /// 􁅖
    static let personBadgeClock = SFSymbol(rawValue: "person.badge.clock")

    /// 􁅗
    static let personBadgeClockFill = SFSymbol(rawValue: "person.badge.clock.fill")

    /// 􀿏
    static let personCropArtframe = SFSymbol(rawValue: "person.crop.artframe")

    /// 􁂛
    static let personCropCircleBadge = SFSymbol(rawValue: "person.crop.circle.badge")

    /// 􁅔
    static let personCropCircleBadgeClock = SFSymbol(rawValue: "person.crop.circle.badge.clock")

    /// 􁅕
    static let personCropCircleBadgeClockFill = SFSymbol(rawValue: "person.crop.circle.badge.clock.fill")

    /// 􀉸
    static let personCropCircleBadgeExclamationmarkFill = SFSymbol(rawValue: "person.crop.circle.badge.exclamationmark.fill")

    /// 􁂜
    static let personCropCircleBadgeFill = SFSymbol(rawValue: "person.crop.circle.badge.fill")

    /// 􁃈
    static let personCropCircleBadgeMoon = SFSymbol(rawValue: "person.crop.circle.badge.moon")

    /// 􁃉
    static let personCropCircleBadgeMoonFill = SFSymbol(rawValue: "person.crop.circle.badge.moon.fill")

    /// 􀭾
    /// From iOS 14.0, macOS 11.0, tvOS 14.0 and watchOS 7.0 on, the following localizations are available: Arabic
    static let personCropCircleBadgeQuestionmarkFill = SFSymbol(rawValue: "person.crop.circle.badge.questionmark.fill")

    /// 􀏻
    static let personCropRectangleStack = SFSymbol(rawValue: "person.crop.rectangle.stack")

    /// 􀏼
    static let personCropRectangleStackFill = SFSymbol(rawValue: "person.crop.rectangle.stack.fill")

    /// 􀦎
    static let personCropSquareFilledAndAtRectangle = SFSymbol(rawValue: "person.crop.square.filled.and.at.rectangle")

    /// 􀿐
    static let personCropSquareFilledAndAtRectangleFill = SFSymbol(rawValue: "person.crop.square.filled.and.at.rectangle.fill")

    /// 􀿒
    static let personTextRectangle = SFSymbol(rawValue: "person.text.rectangle")

    /// 􀿓
    static let personTextRectangleFill = SFSymbol(rawValue: "person.text.rectangle.fill")

    /// 􁅇
    static let personWave2 = SFSymbol(rawValue: "person.wave.2")

    /// 􁅈
    static let personWave2Fill = SFSymbol(rawValue: "person.wave.2.fill")

    /// 􁈨
    static let personalhotspotCircle = SFSymbol(rawValue: "personalhotspot.circle")

    /// 􁈩
    static let personalhotspotCircleFill = SFSymbol(rawValue: "personalhotspot.circle.fill")

    /// 􀼃
    static let phoneAndWaveform = SFSymbol(rawValue: "phone.and.waveform")

    /// 􀼄
    static let phoneAndWaveformFill = SFSymbol(rawValue: "phone.and.waveform.fill")

    /// 􁀶
    static let photoArtframe = SFSymbol(rawValue: "photo.artframe")

    /// 􁂮
    static let photoCircle = SFSymbol(rawValue: "photo.circle")

    /// 􁂯
    static let photoCircleFill = SFSymbol(rawValue: "photo.circle.fill")

    /// 􁇂
    static let pillsCircle = SFSymbol(rawValue: "pills.circle")

    /// 􁇃
    static let pillsCircleFill = SFSymbol(rawValue: "pills.circle.fill")

    /// 􀽋
    static let pinSquare = SFSymbol(rawValue: "pin.square")

    /// 􀽌
    static let pinSquareFill = SFSymbol(rawValue: "pin.square.fill")

    /// 􁁍
    static let platter2FilledIpad = SFSymbol(rawValue: "platter.2.filled.ipad")

    /// 􁁎
    static let platter2FilledIpadLandscape = SFSymbol(rawValue: "platter.2.filled.ipad.landscape")

    /// 􀾩
    static let platter2FilledIphone = SFSymbol(rawValue: "platter.2.filled.iphone")

    /// 􀾪
    static let platter2FilledIphoneLandscape = SFSymbol(rawValue: "platter.2.filled.iphone.landscape")

    /// 􁃇
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let platterBottomApplewatchCase = SFSymbol(rawValue: "platter.bottom.applewatch.case")

    /// 􁃅
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let platterFilledBottomApplewatchCase = SFSymbol(rawValue: "platter.filled.bottom.applewatch.case")

    /// 􁃄
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let platterFilledTopApplewatchCase = SFSymbol(rawValue: "platter.filled.top.applewatch.case")

    /// 􁃆
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let platterTopApplewatchCase = SFSymbol(rawValue: "platter.top.applewatch.case")

    /// 􀾬
    static let playRectangleOnRectangle = SFSymbol(rawValue: "play.rectangle.on.rectangle")

    /// 􁃀
    static let playRectangleOnRectangleCircle = SFSymbol(rawValue: "play.rectangle.on.rectangle.circle")

    /// 􁃁
    static let playRectangleOnRectangleCircleFill = SFSymbol(rawValue: "play.rectangle.on.rectangle.circle.fill")

    /// 􀾭
    static let playRectangleOnRectangleFill = SFSymbol(rawValue: "play.rectangle.on.rectangle.fill")

    /// 􀽍
    static let playSquare = SFSymbol(rawValue: "play.square")

    /// 􀽎
    static let playSquareFill = SFSymbol(rawValue: "play.square.fill")

    /// 􀅺
    static let plusForwardslashMinus = SFSymbol(rawValue: "plus.forwardslash.minus")

    /// 􀤱
    static let plusRectangleOnFolderFill = SFSymbol(rawValue: "plus.rectangle.on.folder.fill")

    /// 􀴥
    static let plusSquareDashed = SFSymbol(rawValue: "plus.square.dashed")

    /// 􁆬
    static let point3ConnectedTrianglepathDotted = SFSymbol(rawValue: "point.3.connected.trianglepath.dotted")

    /// 􁅥
    static let point3FilledConnectedTrianglepathDotted = SFSymbol(rawValue: "point.3.filled.connected.trianglepath.dotted")

    /// 􀾕
    static let pointFilledTopleftDownCurvedtoPointBottomrightUp = SFSymbol(rawValue: "point.filled.topleft.down.curvedto.point.bottomright.up")

    /// 􀬱
    static let pointTopleftDownCurvedtoPointBottomrightUpFill = SFSymbol(rawValue: "point.topleft.down.curvedto.point.bottomright.up.fill")

    /// 􀾔
    static let pointTopleftDownCurvedtoPointFilledBottomrightUp = SFSymbol(rawValue: "point.topleft.down.curvedto.point.filled.bottomright.up")

    /// 􀷃
    static let powerCircle = SFSymbol(rawValue: "power.circle")

    /// 􀷄
    static let powerCircleFill = SFSymbol(rawValue: "power.circle.fill")

    /// 􀆩
    static let powerDotted = SFSymbol(rawValue: "power.dotted")

    /// 􀡷
    static let powerplug = SFSymbol(rawValue: "powerplug")

    /// 􀡸
    static let powerplugFill = SFSymbol(rawValue: "powerplug.fill")

    /// 􀪿
    static let printerDotmatrixFilledAndPaper = SFSymbol(rawValue: "printer.dotmatrix.filled.and.paper")

    /// 􀪾
    static let printerFilledAndPaper = SFSymbol(rawValue: "printer.filled.and.paper")

    /// 􀥭
    static let puzzlepieceExtension = SFSymbol(rawValue: "puzzlepiece.extension")

    /// 􀥮
    static let puzzlepieceExtensionFill = SFSymbol(rawValue: "puzzlepiece.extension.fill")

    /// 􀿨
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Arabic
    static let questionmarkApp = SFSymbol(rawValue: "questionmark.app")

    /// 􀿪
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Arabic
    static let questionmarkAppDashed = SFSymbol(rawValue: "questionmark.app.dashed")

    /// 􀿩
    /// From iOS 15.0, macOS 12.0, tvOS 15.0 and watchOS 8.0 on, the following localizations are available: Arabic
    static let questionmarkAppFill = SFSymbol(rawValue: "questionmark.app.fill")

    /// 􁈐
    static let quoteClosing = SFSymbol(rawValue: "quote.closing")

    /// 􁈏
    static let quoteOpening = SFSymbol(rawValue: "quote.opening")

    /// 􀦕
    static let rJoystickPressDown = SFSymbol(rawValue: "r.joystick.press.down")

    /// 􀫄
    static let rJoystickPressDownFill = SFSymbol(rawValue: "r.joystick.press.down.fill")

    /// 􀿤
    static let rJoystickTiltDown = SFSymbol(rawValue: "r.joystick.tilt.down")

    /// 􀿥
    static let rJoystickTiltDownFill = SFSymbol(rawValue: "r.joystick.tilt.down.fill")

    /// 􀿞
    static let rJoystickTiltLeft = SFSymbol(rawValue: "r.joystick.tilt.left")

    /// 􀿟
    static let rJoystickTiltLeftFill = SFSymbol(rawValue: "r.joystick.tilt.left.fill")

    /// 􀿠
    static let rJoystickTiltRight = SFSymbol(rawValue: "r.joystick.tilt.right")

    /// 􀿡
    static let rJoystickTiltRightFill = SFSymbol(rawValue: "r.joystick.tilt.right.fill")

    /// 􀿢
    static let rJoystickTiltUp = SFSymbol(rawValue: "r.joystick.tilt.up")

    /// 􀿣
    static let rJoystickTiltUpFill = SFSymbol(rawValue: "r.joystick.tilt.up.fill")

    /// 􀭙
    static let rSquareOnSquareFill = SFSymbol(rawValue: "r.square.on.square.fill")

    /// 􁁀
    static let rectangle2Swap = SFSymbol(rawValue: "rectangle.2.swap")

    /// 􀇴
    static let rectangle3Group = SFSymbol(rawValue: "rectangle.3.group")

    /// 􀬄
    static let rectangle3GroupBubbleLeft = SFSymbol(rawValue: "rectangle.3.group.bubble.left")

    /// 􀬅
    static let rectangle3GroupBubbleLeftFill = SFSymbol(rawValue: "rectangle.3.group.bubble.left.fill")

    /// 􀚅
    static let rectangle3GroupFill = SFSymbol(rawValue: "rectangle.3.group.fill")

    /// 􀪤
    static let rectangleAndHandPointUpLeft = SFSymbol(rawValue: "rectangle.and.hand.point.up.left")

    /// 􀪥
    static let rectangleAndHandPointUpLeftFill = SFSymbol(rawValue: "rectangle.and.hand.point.up.left.fill")

    /// 􀪧
    static let rectangleAndHandPointUpLeftFilled = SFSymbol(rawValue: "rectangle.and.hand.point.up.left.filled")

    /// 􀿰
    static let rectangleBottomhalfFilled = SFSymbol(rawValue: "rectangle.bottomhalf.filled")

    /// 􀾯
    static let rectangleBottomhalfInsetFilled = SFSymbol(rawValue: "rectangle.bottomhalf.inset.filled")

    /// 􀨨
    static let rectangleBottomthirdInsetFilled = SFSymbol(rawValue: "rectangle.bottomthird.inset.filled")

    /// 􀥝
    static let rectangleCenterInsetFilled = SFSymbol(rawValue: "rectangle.center.inset.filled")

    /// 􁈔
    static let rectangleCenterInsetFilledBadgePlus = SFSymbol(rawValue: "rectangle.center.inset.filled.badge.plus")

    /// 􀪦
    static let rectangleFilledAndHandPointUpLeft = SFSymbol(rawValue: "rectangle.filled.and.hand.point.up.left")

    /// 􁁫
    static let rectangleInsetBottomleadingFilled = SFSymbol(rawValue: "rectangle.inset.bottomleading.filled")

    /// 􀭵
    static let rectangleInsetBottomleftFilled = SFSymbol(rawValue: "rectangle.inset.bottomleft.filled")

    /// 􀭶
    static let rectangleInsetBottomrightFilled = SFSymbol(rawValue: "rectangle.inset.bottomright.filled")

    /// 􁁬
    static let rectangleInsetBottomtrailingFilled = SFSymbol(rawValue: "rectangle.inset.bottomtrailing.filled")

    /// 􀤳
    static let rectangleInsetFilled = SFSymbol(rawValue: "rectangle.inset.filled")

    /// 􁅀
    static let rectangleInsetFilledAndPersonFilled = SFSymbol(rawValue: "rectangle.inset.filled.and.person.filled")

    /// 􀶣
    static let rectangleInsetFilledOnRectangle = SFSymbol(rawValue: "rectangle.inset.filled.on.rectangle")

    /// 􁁩
    static let rectangleInsetTopleadingFilled = SFSymbol(rawValue: "rectangle.inset.topleading.filled")

    /// 􀭳
    static let rectangleInsetTopleftFilled = SFSymbol(rawValue: "rectangle.inset.topleft.filled")

    /// 􀭴
    static let rectangleInsetToprightFilled = SFSymbol(rawValue: "rectangle.inset.topright.filled")

    /// 􁁪
    static let rectangleInsetToptrailingFilled = SFSymbol(rawValue: "rectangle.inset.toptrailing.filled")

    /// 􁁣
    static let rectangleLeadinghalfInsetFilled = SFSymbol(rawValue: "rectangle.leadinghalf.inset.filled")

    /// 􁁥
    static let rectangleLeadinghalfInsetFilledArrowLeading = SFSymbol(rawValue: "rectangle.leadinghalf.inset.filled.arrow.leading")

    /// 􁁧
    static let rectangleLeadingthirdInsetFilled = SFSymbol(rawValue: "rectangle.leadingthird.inset.filled")

    /// 􀤶
    static let rectangleLefthalfFilled = SFSymbol(rawValue: "rectangle.lefthalf.filled")

    /// 􀤴
    static let rectangleLefthalfInsetFilled = SFSymbol(rawValue: "rectangle.lefthalf.inset.filled")

    /// 􀥞
    static let rectangleLefthalfInsetFilledArrowLeft = SFSymbol(rawValue: "rectangle.lefthalf.inset.filled.arrow.left")

    /// 􀨱
    static let rectangleLeftthirdInsetFilled = SFSymbol(rawValue: "rectangle.leftthird.inset.filled")

    /// 􀤽
    static let rectangleOnRectangleCircle = SFSymbol(rawValue: "rectangle.on.rectangle.circle")

    /// 􀤾
    static let rectangleOnRectangleCircleFill = SFSymbol(rawValue: "rectangle.on.rectangle.circle.fill")

    /// 􀻯
    static let rectangleOnRectangleSlashCircle = SFSymbol(rawValue: "rectangle.on.rectangle.slash.circle")

    /// 􀻰
    static let rectangleOnRectangleSlashCircleFill = SFSymbol(rawValue: "rectangle.on.rectangle.slash.circle.fill")

    /// 􀤿
    static let rectangleOnRectangleSlashFill = SFSymbol(rawValue: "rectangle.on.rectangle.slash.fill")

    /// 􀽏
    static let rectangleOnRectangleSquare = SFSymbol(rawValue: "rectangle.on.rectangle.square")

    /// 􀽐
    static let rectangleOnRectangleSquareFill = SFSymbol(rawValue: "rectangle.on.rectangle.square.fill")

    /// 􀻵
    static let rectanglePortraitAndArrowRight = SFSymbol(rawValue: "rectangle.portrait.and.arrow.right")

    /// 􀻶
    static let rectanglePortraitAndArrowRightFill = SFSymbol(rawValue: "rectangle.portrait.and.arrow.right.fill")

    /// 􀿲
    static let rectanglePortraitBottomhalfFilled = SFSymbol(rawValue: "rectangle.portrait.bottomhalf.filled")

    /// 􀽺
    static let rectanglePortraitBottomhalfInsetFilled = SFSymbol(rawValue: "rectangle.portrait.bottomhalf.inset.filled")

    /// 􁁳
    static let rectanglePortraitBottomleadingInsetFilled = SFSymbol(rawValue: "rectangle.portrait.bottomleading.inset.filled")

    /// 􀾃
    static let rectanglePortraitBottomleftInsetFilled = SFSymbol(rawValue: "rectangle.portrait.bottomleft.inset.filled")

    /// 􀾂
    static let rectanglePortraitBottomrightInsetFilled = SFSymbol(rawValue: "rectangle.portrait.bottomright.inset.filled")

    /// 􀽾
    static let rectanglePortraitBottomthirdInsetFilled = SFSymbol(rawValue: "rectangle.portrait.bottomthird.inset.filled")

    /// 􁁴
    static let rectanglePortraitBottomtrailingInsetFilled = SFSymbol(rawValue: "rectangle.portrait.bottomtrailing.inset.filled")

    /// 􀽿
    static let rectanglePortraitCenterInsetFilled = SFSymbol(rawValue: "rectangle.portrait.center.inset.filled")

    /// 􀽸
    static let rectanglePortraitInsetFilled = SFSymbol(rawValue: "rectangle.portrait.inset.filled")

    /// 􁁭
    static let rectanglePortraitLeadinghalfInsetFilled = SFSymbol(rawValue: "rectangle.portrait.leadinghalf.inset.filled")

    /// 􁁯
    static let rectanglePortraitLeadingthirdInsetFilled = SFSymbol(rawValue: "rectangle.portrait.leadingthird.inset.filled")

    /// 􀿬
    static let rectanglePortraitLefthalfFilled = SFSymbol(rawValue: "rectangle.portrait.lefthalf.filled")

    /// 􀾄
    static let rectanglePortraitLefthalfInsetFilled = SFSymbol(rawValue: "rectangle.portrait.lefthalf.inset.filled")

    /// 􀽼
    static let rectanglePortraitLeftthirdInsetFilled = SFSymbol(rawValue: "rectangle.portrait.leftthird.inset.filled")

    /// 􀽰
    static let rectanglePortraitOnRectanglePortrait = SFSymbol(rawValue: "rectangle.portrait.on.rectangle.portrait")

    /// 􀽱
    static let rectanglePortraitOnRectanglePortraitFill = SFSymbol(rawValue: "rectangle.portrait.on.rectangle.portrait.fill")

    /// 􀽲
    static let rectanglePortraitOnRectanglePortraitSlash = SFSymbol(rawValue: "rectangle.portrait.on.rectangle.portrait.slash")

    /// 􀽳
    static let rectanglePortraitOnRectanglePortraitSlashFill = SFSymbol(rawValue: "rectangle.portrait.on.rectangle.portrait.slash.fill")

    /// 􀿭
    static let rectanglePortraitRighthalfFilled = SFSymbol(rawValue: "rectangle.portrait.righthalf.filled")

    /// 􀾅
    static let rectanglePortraitRighthalfInsetFilled = SFSymbol(rawValue: "rectangle.portrait.righthalf.inset.filled")

    /// 􀽻
    static let rectanglePortraitRightthirdInsetFilled = SFSymbol(rawValue: "rectangle.portrait.rightthird.inset.filled")

    /// 􀾆
    static let rectanglePortraitSlash = SFSymbol(rawValue: "rectangle.portrait.slash")

    /// 􀾇
    static let rectanglePortraitSlashFill = SFSymbol(rawValue: "rectangle.portrait.slash.fill")

    /// 􀽴
    static let rectanglePortraitSplit2x1 = SFSymbol(rawValue: "rectangle.portrait.split.2x1")

    /// 􀽵
    static let rectanglePortraitSplit2x1Fill = SFSymbol(rawValue: "rectangle.portrait.split.2x1.fill")

    /// 􀽶
    static let rectanglePortraitSplit2x1Slash = SFSymbol(rawValue: "rectangle.portrait.split.2x1.slash")

    /// 􀽷
    static let rectanglePortraitSplit2x1SlashFill = SFSymbol(rawValue: "rectangle.portrait.split.2x1.slash.fill")

    /// 􀿱
    static let rectanglePortraitTophalfFilled = SFSymbol(rawValue: "rectangle.portrait.tophalf.filled")

    /// 􀽹
    static let rectanglePortraitTophalfInsetFilled = SFSymbol(rawValue: "rectangle.portrait.tophalf.inset.filled")

    /// 􁁱
    static let rectanglePortraitTopleadingInsetFilled = SFSymbol(rawValue: "rectangle.portrait.topleading.inset.filled")

    /// 􀾀
    static let rectanglePortraitTopleftInsetFilled = SFSymbol(rawValue: "rectangle.portrait.topleft.inset.filled")

    /// 􀾁
    static let rectanglePortraitToprightInsetFilled = SFSymbol(rawValue: "rectangle.portrait.topright.inset.filled")

    /// 􀽽
    static let rectanglePortraitTopthirdInsetFilled = SFSymbol(rawValue: "rectangle.portrait.topthird.inset.filled")

    /// 􁁲
    static let rectanglePortraitToptrailingInsetFilled = SFSymbol(rawValue: "rectangle.portrait.toptrailing.inset.filled")

    /// 􁁮
    static let rectanglePortraitTrailinghalfInsetFilled = SFSymbol(rawValue: "rectangle.portrait.trailinghalf.inset.filled")

    /// 􁁰
    static let rectanglePortraitTrailingthirdInsetFilled = SFSymbol(rawValue: "rectangle.portrait.trailingthird.inset.filled")

    /// 􀤷
    static let rectangleRighthalfFilled = SFSymbol(rawValue: "rectangle.righthalf.filled")

    /// 􀤵
    static let rectangleRighthalfInsetFilled = SFSymbol(rawValue: "rectangle.righthalf.inset.filled")

    /// 􀥟
    static let rectangleRighthalfInsetFilledArrowRight = SFSymbol(rawValue: "rectangle.righthalf.inset.filled.arrow.right")

    /// 􀨩
    static let rectangleRightthirdInsetFilled = SFSymbol(rawValue: "rectangle.rightthird.inset.filled")

    /// 􀾊
    static let rectangleSplit2x1Slash = SFSymbol(rawValue: "rectangle.split.2x1.slash")

    /// 􀾋
    static let rectangleSplit2x1SlashFill = SFSymbol(rawValue: "rectangle.split.2x1.slash.fill")

    /// 􀏺
    static let rectangleStackBadgePersonCropFill = SFSymbol(rawValue: "rectangle.stack.badge.person.crop.fill")

    /// 􀽙
    static let rectangleStackBadgePlay = SFSymbol(rawValue: "rectangle.stack.badge.play")

    /// 􀽚
    static let rectangleStackBadgePlayFill = SFSymbol(rawValue: "rectangle.stack.badge.play.fill")

    /// 􀿯
    static let rectangleTophalfFilled = SFSymbol(rawValue: "rectangle.tophalf.filled")

    /// 􀾮
    static let rectangleTophalfInsetFilled = SFSymbol(rawValue: "rectangle.tophalf.inset.filled")

    /// 􀴊
    static let rectangleTopthirdInsetFilled = SFSymbol(rawValue: "rectangle.topthird.inset.filled")

    /// 􁁤
    static let rectangleTrailinghalfInsetFilled = SFSymbol(rawValue: "rectangle.trailinghalf.inset.filled")

    /// 􁁦
    static let rectangleTrailinghalfInsetFilledArrowTrailing = SFSymbol(rawValue: "rectangle.trailinghalf.inset.filled.arrow.trailing")

    /// 􁁨
    static let rectangleTrailingthirdInsetFilled = SFSymbol(rawValue: "rectangle.trailingthird.inset.filled")

    /// 􀶞
    static let restartCircleFill = SFSymbol(rawValue: "restart.circle.fill")

    /// 􁂆
    static let returnLeft = SFSymbol(rawValue: "return.left")

    /// 􁂇
    static let returnRight = SFSymbol(rawValue: "return.right")

    /// 􁇔
    static let scissorsCircle = SFSymbol(rawValue: "scissors.circle")

    /// 􁇕
    static let scissorsCircleFill = SFSymbol(rawValue: "scissors.circle.fill")

    /// 􁈌
    static let scooter = SFSymbol(rawValue: "scooter")

    /// 􀤈
    static let screwdriver = SFSymbol(rawValue: "screwdriver")

    /// 􀤉
    static let screwdriverFill = SFSymbol(rawValue: "screwdriver.fill")

    /// 􁁝
    static let sensorTagRadiowavesForward = SFSymbol(rawValue: "sensor.tag.radiowaves.forward")

    /// 􁁞
    static let sensorTagRadiowavesForwardFill = SFSymbol(rawValue: "sensor.tag.radiowaves.forward.fill")

    /// 􁃑
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s SharePlay.
    static let shareplay = SFSymbol(rawValue: "shareplay")

    /// 􀴔
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s SharePlay.
    static let shareplaySlash = SFSymbol(rawValue: "shareplay.slash")

    /// 􀙨
    static let shieldLefthalfFilled = SFSymbol(rawValue: "shield.lefthalf.filled")

    /// 􀲊
    static let shieldLefthalfFilledSlash = SFSymbol(rawValue: "shield.lefthalf.filled.slash")

    /// 􀿮
    static let shieldRighthalfFilled = SFSymbol(rawValue: "shield.righthalf.filled")

    /// 􁇈
    static let shippingboxCircle = SFSymbol(rawValue: "shippingbox.circle")

    /// 􁇉
    static let shippingboxCircleFill = SFSymbol(rawValue: "shippingbox.circle.fill")

    /// 􀶟
    static let sleepCircle = SFSymbol(rawValue: "sleep.circle")

    /// 􀶠
    static let sleepCircleFill = SFSymbol(rawValue: "sleep.circle.fill")

    /// 􁅊
    static let sliderHorizontal2RectangleAndArrowTriangle2Circlepath = SFSymbol(rawValue: "slider.horizontal.2.rectangle.and.arrow.triangle.2.circlepath")

    /// 􀰗
    static let sliderHorizontalBelowSquareFilledAndSquare = SFSymbol(rawValue: "slider.horizontal.below.square.filled.and.square")

    /// 􀍷
    static let smallcircleFilledCircle = SFSymbol(rawValue: "smallcircle.filled.circle")

    /// 􀕩
    static let smallcircleFilledCircleFill = SFSymbol(rawValue: "smallcircle.filled.circle.fill")

    /// 􀇥
    static let snowflake = SFSymbol(rawValue: "snowflake")

    /// 􁇌
    static let snowflakeCircle = SFSymbol(rawValue: "snowflake.circle")

    /// 􁇍
    static let snowflakeCircleFill = SFSymbol(rawValue: "snowflake.circle.fill")

    /// 􁇥
    static let sparkleMagnifyingglass = SFSymbol(rawValue: "sparkle.magnifyingglass")

    /// 􀰙
    static let sparklesSquareFilledOnSquare = SFSymbol(rawValue: "sparkles.square.filled.on.square")

    /// 􁅋
    static let sparklesTv = SFSymbol(rawValue: "sparkles.tv")

    /// 􁅌
    static let sparklesTvFill = SFSymbol(rawValue: "sparkles.tv.fill")

    /// 􀾏
    static let speakerBadgeExclamationmark = SFSymbol(rawValue: "speaker.badge.exclamationmark")

    /// 􀾐
    static let speakerBadgeExclamationmarkFill = SFSymbol(rawValue: "speaker.badge.exclamationmark.fill")

    /// 􀻁
    static let speakerCircle = SFSymbol(rawValue: "speaker.circle")

    /// 􀻂
    static let speakerCircleFill = SFSymbol(rawValue: "speaker.circle.fill")

    /// 􀯯
    static let square2Stack3dBottomFilled = SFSymbol(rawValue: "square.2.stack.3d.bottom.filled")

    /// 􀯮
    static let square2Stack3dTopFilled = SFSymbol(rawValue: "square.2.stack.3d.top.filled")

    /// 􀯳
    static let square3Stack3dBottomFilled = SFSymbol(rawValue: "square.3.stack.3d.bottom.filled")

    /// 􀯲
    static let square3Stack3dMiddleFilled = SFSymbol(rawValue: "square.3.stack.3d.middle.filled")

    /// 􀯱
    static let square3Stack3dTopFilled = SFSymbol(rawValue: "square.3.stack.3d.top.filled")

    /// 􁅅
    static let squareAndArrowUpCircle = SFSymbol(rawValue: "square.and.arrow.up.circle")

    /// 􁅆
    static let squareAndArrowUpCircleFill = SFSymbol(rawValue: "square.and.arrow.up.circle.fill")

    /// 􁂚
    static let squareAndArrowUpTrianglebadgeExclamationmark = SFSymbol(rawValue: "square.and.arrow.up.trianglebadge.exclamationmark")

    /// 􀿑
    static let squareAndAtRectangleFill = SFSymbol(rawValue: "square.and.at.rectangle.fill")

    /// 􀐔
    static let squareAndLineVerticalAndSquareFilled = SFSymbol(rawValue: "square.and.line.vertical.and.square.filled")

    /// 􀪚
    static let squareBottomhalfFilled = SFSymbol(rawValue: "square.bottomhalf.filled")

    /// 􀧑
    static let squareDashedInsetFilled = SFSymbol(rawValue: "square.dashed.inset.filled")

    /// 􀐒
    static let squareFillAndLineVerticalAndSquareFill = SFSymbol(rawValue: "square.fill.and.line.vertical.and.square.fill")

    /// 􀐓
    static let squareFilledAndLineVerticalAndSquare = SFSymbol(rawValue: "square.filled.and.line.vertical.and.square")

    /// 􀫝
    static let squareFilledOnSquare = SFSymbol(rawValue: "square.filled.on.square")

    /// 􀤲
    static let squareGrid3x1BelowLineGrid1x2Fill = SFSymbol(rawValue: "square.grid.3x1.below.line.grid.1x2.fill")

    /// 􀦺
    static let squareGrid3x3BottomleftFilled = SFSymbol(rawValue: "square.grid.3x3.bottomleft.filled")

    /// 􀦻
    static let squareGrid3x3BottommiddleFilled = SFSymbol(rawValue: "square.grid.3x3.bottommiddle.filled")

    /// 􀦼
    static let squareGrid3x3BottomrightFilled = SFSymbol(rawValue: "square.grid.3x3.bottomright.filled")

    /// 􀦸
    static let squareGrid3x3MiddleFilled = SFSymbol(rawValue: "square.grid.3x3.middle.filled")

    /// 􀦷
    static let squareGrid3x3MiddleleftFilled = SFSymbol(rawValue: "square.grid.3x3.middleleft.filled")

    /// 􀦹
    static let squareGrid3x3MiddlerightFilled = SFSymbol(rawValue: "square.grid.3x3.middleright.filled")

    /// 􀫐
    static let squareGrid3x3Square = SFSymbol(rawValue: "square.grid.3x3.square")

    /// 􀦴
    static let squareGrid3x3TopleftFilled = SFSymbol(rawValue: "square.grid.3x3.topleft.filled")

    /// 􀦵
    static let squareGrid3x3TopmiddleFilled = SFSymbol(rawValue: "square.grid.3x3.topmiddle.filled")

    /// 􀦶
    static let squareGrid3x3ToprightFilled = SFSymbol(rawValue: "square.grid.3x3.topright.filled")

    /// 􀾘
    static let squareInsetFilled = SFSymbol(rawValue: "square.inset.filled")

    /// 􀚓
    static let squareLefthalfFilled = SFSymbol(rawValue: "square.lefthalf.filled")

    /// 􀚔
    static let squareRighthalfFilled = SFSymbol(rawValue: "square.righthalf.filled")

    /// 􀻡
    static let squareTextSquare = SFSymbol(rawValue: "square.text.square")

    /// 􀻢
    static let squareTextSquareFill = SFSymbol(rawValue: "square.text.square.fill")

    /// 􀪛
    static let squareTophalfFilled = SFSymbol(rawValue: "square.tophalf.filled")

    /// 􁂪
    static let starBubble = SFSymbol(rawValue: "star.bubble")

    /// 􁂫
    static let starBubbleFill = SFSymbol(rawValue: "star.bubble.fill")

    /// 􀋄
    static let starLeadinghalfFilled = SFSymbol(rawValue: "star.leadinghalf.filled")

    /// 􁇄
    static let stethoscopeCircle = SFSymbol(rawValue: "stethoscope.circle")

    /// 􁇅
    static let stethoscopeCircleFill = SFSymbol(rawValue: "stethoscope.circle.fill")

    /// 􀶉
    static let suitcase = SFSymbol(rawValue: "suitcase")

    /// 􀶋
    static let suitcaseCart = SFSymbol(rawValue: "suitcase.cart")

    /// 􀶌
    static let suitcaseCartFill = SFSymbol(rawValue: "suitcase.cart.fill")

    /// 􀶊
    static let suitcaseFill = SFSymbol(rawValue: "suitcase.fill")

    /// 􀻞
    static let sunAndHorizon = SFSymbol(rawValue: "sun.and.horizon")

    /// 􀻟
    static let sunAndHorizonFill = SFSymbol(rawValue: "sun.and.horizon.fill")

    /// 􀷎
    static let sunMaxCircle = SFSymbol(rawValue: "sun.max.circle")

    /// 􀷏
    static let sunMaxCircleFill = SFSymbol(rawValue: "sun.max.circle.fill")

    /// 􀏦
    static let tablecellsFillBadgeEllipsis = SFSymbol(rawValue: "tablecells.fill.badge.ellipsis")

    /// 􀽁
    static let tagSquare = SFSymbol(rawValue: "tag.square")

    /// 􀽂
    static let tagSquareFill = SFSymbol(rawValue: "tag.square.fill")

    /// 􀻐
    static let takeoutbagAndCupAndStraw = SFSymbol(rawValue: "takeoutbag.and.cup.and.straw")

    /// 􀻑
    static let takeoutbagAndCupAndStrawFill = SFSymbol(rawValue: "takeoutbag.and.cup.and.straw.fill")

    /// 􀴦
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Teletype feature.
    static let teletypeAnswerCircle = SFSymbol(rawValue: "teletype.answer.circle")

    /// 􀴧
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s Teletype feature.
    static let teletypeAnswerCircleFill = SFSymbol(rawValue: "teletype.answer.circle.fill")

    /// 􁂶
    static let testtube2 = SFSymbol(rawValue: "testtube.2")

    /// 􀹃
    static let textViewfinder = SFSymbol(rawValue: "text.viewfinder")

    /// 􀺧
    static let theatermasks = SFSymbol(rawValue: "theatermasks")

    /// 􁂻
    static let theatermasksCircle = SFSymbol(rawValue: "theatermasks.circle")

    /// 􁂼
    static let theatermasksCircleFill = SFSymbol(rawValue: "theatermasks.circle.fill")

    /// 􀺨
    static let theatermasksFill = SFSymbol(rawValue: "theatermasks.fill")

    /// 􀼮
    static let trainSideFrontCar = SFSymbol(rawValue: "train.side.front.car")

    /// 􀼯
    static let trainSideMiddleCar = SFSymbol(rawValue: "train.side.middle.car")

    /// 􀼰
    static let trainSideRearCar = SFSymbol(rawValue: "train.side.rear.car")

    /// 􀜝
    static let tramFillTunnel = SFSymbol(rawValue: "tram.fill.tunnel")

    /// 􀡛
    static let trapezoidAndLineHorizontal = SFSymbol(rawValue: "trapezoid.and.line.horizontal")

    /// 􀞑
    static let trapezoidAndLineHorizontalFill = SFSymbol(rawValue: "trapezoid.and.line.horizontal.fill")

    /// 􀡠
    static let trapezoidAndLineVertical = SFSymbol(rawValue: "trapezoid.and.line.vertical")

    /// 􀞐
    static let trapezoidAndLineVerticalFill = SFSymbol(rawValue: "trapezoid.and.line.vertical.fill")

    /// 􀿍
    static let trashSlashCircle = SFSymbol(rawValue: "trash.slash.circle")

    /// 􀿎
    static let trashSlashCircleFill = SFSymbol(rawValue: "trash.slash.circle.fill")

    /// 􀿔
    static let trashSlashSquare = SFSymbol(rawValue: "trash.slash.square")

    /// 􀿕
    static let trashSlashSquareFill = SFSymbol(rawValue: "trash.slash.square.fill")

    /// 􀼽
    static let trashSquare = SFSymbol(rawValue: "trash.square")

    /// 􀼾
    static let trashSquareFill = SFSymbol(rawValue: "trash.square.fill")

    /// 􁀹
    static let triangleBottomhalfFilled = SFSymbol(rawValue: "triangle.bottomhalf.filled")

    /// 􀾙
    static let triangleInsetFilled = SFSymbol(rawValue: "triangle.inset.filled")

    /// 􀚕
    static let triangleLefthalfFilled = SFSymbol(rawValue: "triangle.lefthalf.filled")

    /// 􀚖
    static let triangleRighthalfFilled = SFSymbol(rawValue: "triangle.righthalf.filled")

    /// 􁀸
    static let triangleTophalfFilled = SFSymbol(rawValue: "triangle.tophalf.filled")

    /// 􀾠
    static let tshirt = SFSymbol(rawValue: "tshirt")

    /// 􀾡
    static let tshirtFill = SFSymbol(rawValue: "tshirt.fill")

    /// 􀷘
    static let tvInsetFilled = SFSymbol(rawValue: "tv.inset.filled")

    /// 􀼅
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoAndWaveform = SFSymbol(rawValue: "video.and.waveform")

    /// 􀼆
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoAndWaveformFill = SFSymbol(rawValue: "video.and.waveform.fill")

    /// 􁃊
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoBadgeEllipsis = SFSymbol(rawValue: "video.badge.ellipsis")

    /// 􁃋
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoFillBadgeEllipsis = SFSymbol(rawValue: "video.fill.badge.ellipsis")

    /// 􀽉
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoSquare = SFSymbol(rawValue: "video.square")

    /// 􀽊
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple’s FaceTime app.
    static let videoSquareFill = SFSymbol(rawValue: "video.square.fill")

    /// 􀶡
    static let wakeCircle = SFSymbol(rawValue: "wake.circle")

    /// 􀶢
    static let wakeCircleFill = SFSymbol(rawValue: "wake.circle.fill")

    /// 􀺗
    /// ⚠️ This symbol may not be modified and may only be used to refer to Apple Watch.
    static let watchfaceApplewatchCase = SFSymbol(rawValue: "watchface.applewatch.case")

    /// 􀻾
    static let waveformAndMagnifyingglass = SFSymbol(rawValue: "waveform.and.magnifyingglass")

    /// 􁃨
    static let waveformAndMic = SFSymbol(rawValue: "waveform.and.mic")

    /// 􀻽
    static let waveformBadgeExclamationmark = SFSymbol(rawValue: "waveform.badge.exclamationmark")

    /// 􀸷
    static let waveformBadgeMinus = SFSymbol(rawValue: "waveform.badge.minus")

    /// 􀸶
    static let waveformBadgePlus = SFSymbol(rawValue: "waveform.badge.plus")

    /// 􀷖
    static let wifiCircle = SFSymbol(rawValue: "wifi.circle")

    /// 􀷗
    static let wifiCircleFill = SFSymbol(rawValue: "wifi.circle.fill")

    /// 􀽗
    static let wifiSquare = SFSymbol(rawValue: "wifi.square")

    /// 􀽘
    static let wifiSquareFill = SFSymbol(rawValue: "wifi.square.fill")

    /// 􀺾
    static let xmarkApp = SFSymbol(rawValue: "xmark.app")

    /// 􀻀
    static let xmarkAppFill = SFSymbol(rawValue: "xmark.app.fill")
}
