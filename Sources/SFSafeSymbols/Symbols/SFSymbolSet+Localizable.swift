// Don't touch this manually, this code is generated by the SymbolsGenerator helper tool
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public extension SFSymbolSet {
    /// Return every localized variant of every symbol.
    var allLocalizedVariants: Set<SFSymbol> {
        elements.union(ar).union(he).union(hi).union(rtl).union(ja).union(ko).union(th).union(zh).union(zhTraditional)
    }

    /// Localize each symbol in the collection in Arabic.
    /// Symbols which are not localizable in Arabic remain unchanged.
    var ar: Set<SFSymbol> {
        Set(map { symbol in
            if symbol is ar {
                return (symbol as! ar).ar
            } else if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *), symbol is ar_v2 {
                return (symbol as! ar_v2).ar
            } else if #available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *), symbol is ar_v2_1 {
                return (symbol as! ar_v2_1).ar
            } else if #available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *), symbol is ar_v2_2 {
                return (symbol as! ar_v2_2).ar
            } else if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *), symbol is ar_v3 {
                return (symbol as! ar_v3).ar
            } else if #available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *), symbol is ar_v3_1 {
                return (symbol as! ar_v3_1).ar
            } else {
                return symbol
            }
        })
    }

    /// Localize each symbol in the collection in Hebrew.
    /// Symbols which are not localizable in Hebrew remain unchanged.
    var he: Set<SFSymbol> {
        Set(map { symbol in
            if symbol is he {
                return (symbol as! he).he
            } else if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *), symbol is he_v2 {
                return (symbol as! he_v2).he
            } else if #available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *), symbol is he_v2_1 {
                return (symbol as! he_v2_1).he
            } else if #available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *), symbol is he_v2_2 {
                return (symbol as! he_v2_2).he
            } else if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *), symbol is he_v3 {
                return (symbol as! he_v3).he
            } else if #available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *), symbol is he_v3_1 {
                return (symbol as! he_v3_1).he
            } else {
                return symbol
            }
        })
    }

    /// Localize each symbol in the collection in Hindi.
    /// Symbols which are not localizable in Hindi remain unchanged.
    var hi: Set<SFSymbol> {
        Set(map { symbol in
            if symbol is hi {
                return (symbol as! hi).hi
            } else if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *), symbol is hi_v2 {
                return (symbol as! hi_v2).hi
            } else if #available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *), symbol is hi_v2_1 {
                return (symbol as! hi_v2_1).hi
            } else if #available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *), symbol is hi_v2_2 {
                return (symbol as! hi_v2_2).hi
            } else if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *), symbol is hi_v3 {
                return (symbol as! hi_v3).hi
            } else if #available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *), symbol is hi_v3_1 {
                return (symbol as! hi_v3_1).hi
            } else {
                return symbol
            }
        })
    }

    /// Localize each symbol in the collection in Right-To-Left.
    /// Symbols which are not localizable in Right-To-Left remain unchanged.
    var rtl: Set<SFSymbol> {
        Set(map { symbol in
            if symbol is rtl {
                return (symbol as! rtl).rtl
            } else if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *), symbol is rtl_v2 {
                return (symbol as! rtl_v2).rtl
            } else if #available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *), symbol is rtl_v2_1 {
                return (symbol as! rtl_v2_1).rtl
            } else if #available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *), symbol is rtl_v2_2 {
                return (symbol as! rtl_v2_2).rtl
            } else if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *), symbol is rtl_v3 {
                return (symbol as! rtl_v3).rtl
            } else if #available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *), symbol is rtl_v3_1 {
                return (symbol as! rtl_v3_1).rtl
            } else {
                return symbol
            }
        })
    }

    /// Localize each symbol in the collection in Japanese.
    /// Symbols which are not localizable in Japanese remain unchanged.
    var ja: Set<SFSymbol> {
        Set(map { symbol in
            if symbol is ja {
                return (symbol as! ja).ja
            } else if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *), symbol is ja_v2 {
                return (symbol as! ja_v2).ja
            } else if #available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *), symbol is ja_v2_1 {
                return (symbol as! ja_v2_1).ja
            } else if #available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *), symbol is ja_v2_2 {
                return (symbol as! ja_v2_2).ja
            } else if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *), symbol is ja_v3 {
                return (symbol as! ja_v3).ja
            } else if #available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *), symbol is ja_v3_1 {
                return (symbol as! ja_v3_1).ja
            } else {
                return symbol
            }
        })
    }

    /// Localize each symbol in the collection in Korean.
    /// Symbols which are not localizable in Korean remain unchanged.
    var ko: Set<SFSymbol> {
        Set(map { symbol in
            if symbol is ko {
                return (symbol as! ko).ko
            } else if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *), symbol is ko_v2 {
                return (symbol as! ko_v2).ko
            } else if #available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *), symbol is ko_v2_1 {
                return (symbol as! ko_v2_1).ko
            } else if #available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *), symbol is ko_v2_2 {
                return (symbol as! ko_v2_2).ko
            } else if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *), symbol is ko_v3 {
                return (symbol as! ko_v3).ko
            } else if #available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *), symbol is ko_v3_1 {
                return (symbol as! ko_v3_1).ko
            } else {
                return symbol
            }
        })
    }

    /// Localize each symbol in the collection in Thai.
    /// Symbols which are not localizable in Thai remain unchanged.
    var th: Set<SFSymbol> {
        Set(map { symbol in
            if symbol is th {
                return (symbol as! th).th
            } else if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *), symbol is th_v2 {
                return (symbol as! th_v2).th
            } else if #available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *), symbol is th_v2_1 {
                return (symbol as! th_v2_1).th
            } else if #available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *), symbol is th_v2_2 {
                return (symbol as! th_v2_2).th
            } else if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *), symbol is th_v3 {
                return (symbol as! th_v3).th
            } else if #available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *), symbol is th_v3_1 {
                return (symbol as! th_v3_1).th
            } else {
                return symbol
            }
        })
    }

    /// Localize each symbol in the collection in Chinese.
    /// Symbols which are not localizable in Chinese remain unchanged.
    var zh: Set<SFSymbol> {
        Set(map { symbol in
            if symbol is zh {
                return (symbol as! zh).zh
            } else if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *), symbol is zh_v2 {
                return (symbol as! zh_v2).zh
            } else if #available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *), symbol is zh_v2_1 {
                return (symbol as! zh_v2_1).zh
            } else if #available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *), symbol is zh_v2_2 {
                return (symbol as! zh_v2_2).zh
            } else if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *), symbol is zh_v3 {
                return (symbol as! zh_v3).zh
            } else if #available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *), symbol is zh_v3_1 {
                return (symbol as! zh_v3_1).zh
            } else {
                return symbol
            }
        })
    }

    /// Localize each symbol in the collection in Traditional Chinese.
    /// Symbols which are not localizable in Traditional Chinese remain unchanged.
    var zhTraditional: Set<SFSymbol> {
        Set(map { symbol in
            if symbol is zhTraditional {
                return (symbol as! zhTraditional).zhTraditional
            } else if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *), symbol is zhTraditional_v2 {
                return (symbol as! zhTraditional_v2).zhTraditional
            } else if #available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *), symbol is zhTraditional_v2_1 {
                return (symbol as! zhTraditional_v2_1).zhTraditional
            } else if #available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *), symbol is zhTraditional_v2_2 {
                return (symbol as! zhTraditional_v2_2).zhTraditional
            } else if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *), symbol is zhTraditional_v3 {
                return (symbol as! zhTraditional_v3).zhTraditional
            } else if #available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *), symbol is zhTraditional_v3_1 {
                return (symbol as! zhTraditional_v3_1).zhTraditional
            } else {
                return symbol
            }
        })
    }
}