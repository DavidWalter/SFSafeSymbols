// Don't touch this manually, this code is generated by the SymbolsGenerator helper tool

// MARK: - Dynamic Localization

public enum Localization: String, Equatable {
    case ar = "ar"
    case zh = "zh"
}

@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
public extension LocalizableSFSymbol {
    /// Determine all localizations `self` can be localized to on the current platform.
    var availableLocalizations: Set<Localization> {
        var result = Set<Localization>()
        if (localizations.contains { $0 == Ar.self }) { result.update(with: .ar) }
        if #available(iOS 14.0, *), (localizations.contains { $0 == Zh3_0.self }) { result.update(with: .zh) }
        return result
    }
}

// MARK: - Static Localization

@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
public struct Ar: SymbolLocalization {
    let source: SFSymbol
    public init(source: SFSymbol) { self.source = source }
    public var ar: SFSymbol { .init(rawValue: "\(source.rawValue).\(Localization.ar.rawValue)") }
}

@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
public struct Zh3_0: SymbolLocalization {
    let source: SFSymbol
    public init(source: SFSymbol) { self.source = source }
    @available(iOS 15.0, macOS 11.1, *)
    public var zh: SFSymbol { .init(rawValue: "\(source.rawValue).\(Localization.zh.rawValue)") }
}

